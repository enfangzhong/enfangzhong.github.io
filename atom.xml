<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酱油哥博客</title>
  
  <subtitle>喜欢一个人，始于颜值，敬于才华，合于性格，久于善良，终于人品。W我真的好想你，在每一个雨季，你选择遗忘的，是我最不舍的。W不怕万人阻挡，只怕自己投降。W成熟是给你陌生人看的，逗比是给朋友看的，幼稚是给喜欢的人看的。W人生当苦无妨，良人当归即可。W逝者如斯乎，不舍昼夜。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://enfangzhong.github.io/"/>
  <updated>2019-04-26T22:48:11.228Z</updated>
  <id>http://enfangzhong.github.io/</id>
  
  <author>
    <name>酱油哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL内连接、左外连接、右外连接、交叉连接区别</title>
    <link href="http://enfangzhong.github.io/2018/10/17/20181017SQL/"/>
    <id>http://enfangzhong.github.io/2018/10/17/20181017SQL/</id>
    <published>2018-10-17T15:08:51.000Z</published>
    <updated>2019-04-26T22:48:11.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内连接、左外连接、右外连接、交叉连接区别"><a href="#内连接、左外连接、右外连接、交叉连接区别" class="headerlink" title="内连接、左外连接、右外连接、交叉连接区别"></a>内连接、左外连接、右外连接、交叉连接区别</h2><p>在之前，我对MSSQL中的内连接和外连接所得出的数据集不是很清楚。这几天重新温习了一下SQL的书本，现在的思路应该是很清楚了，现在把自己的理解发出来给大家温习下。希望和我一样对SQL的连接语句不太理解的朋友能够有所帮助。（发这么菜的教程，各位大大们别笑话偶了，呵:D ） 有两个表A和表B。表A结构如下： Aid：int；标识种子，主键，自增ID Aname：varchar 数据情况，即用select * from A出来的记录情况如下图1所示：</p><p><img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111507739.png" alt=""><br>图1:A表数据</p><p>表B结构如下： Bid：int；标识种子，主键，自增ID Bnameid：int 数据情况，即用select * from B出来的记录情况如下图2所示：<br> <img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111601913.png" alt=""></p><p>图2:B表数据</p><p>为了把Bid和Aid加以区分，不让大家有误解，所以把Bid的起始种子设置为100。有SQL基本知识的人都知道，两个表要做连接，就必须有个连接字段，从上表中的数据可以看出，在A表中的Aid和B表中的Bnameid就是两个连接字段。下图3说明了连接的所有记录集之间的关系：<br> <img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111618065.png" alt=""><br>图3:连接关系图 </p><p>现在我们对内连接和外连接一一讲解。 1.内连接：利用内连接可获取两表的公共部分的记录，即图3的记录集C 语句如下：Select <em> from A JOIN B ON A.Aid=B.Bnameid 运行结果如下图4所示：其实select </em> from A,B where A.Aid=B.Bnameid与Select * from A JOIN B ON A.Aid=B.Bnameid的运行结果是一样的。<br> <img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111637904.png" alt=""><br>图4:内连接数据</p><p> 2.外连接：外连接分为两种，一种是左连接（Left JOIN）和右连接（Right JOIN）<br> (1)左连接（Left JOIN）：即图3公共部分记录集C＋表A记录集A1。<br> 语句如下：select * from A Left JOIN B ON A.Aid=B.Bnameid<br>运行结果如下图5所示：<br> <img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111658117.png" alt=""></p><p>图5:左连接数据</p><p>说明：在语句中，A在B的左边，并且是Left Join，所以其运算方式为：A左连接B的记录=图3公共部分记录集C＋表A记录集A1<br>在图3中即记录集C中的存在的Aid为：2 3 6 7 8<br>图1中即表A所有记录集A中存在的Aid为：1 2 3 4 5 6 7 8 9<br>表A记录集A1中存在的Aid=(图1中即A表中所有Aid)-(图3中即记录集C中存在的Aid)，最终得出为：1 4 5 9<br>由此得出图5中A左连接B的记录=图3公共部分记录集C＋表A记录集A1, 最终得出的结果图5中可以看出Bnameid及Bid非NULL的记录都为图3公共部分记录集C中的记录；Bnameid及Bid为NULL的Aid为1 4 5 9的四笔记录就是表A记录集A1中存在的Aid。</p><p>(2)右连接（Right JOIN）：即图3公共部分记录集C＋表B记录集B1。</p><p>语句如下：select * from A Right JOIN B ON A.Aid=B.Bnameid   运行结果如下图6所示：<br> <img src="/2018/10/17/20181017SQL/images/20181017SQL/20181017111728233.png" alt=""><br>图6:右连接数据 </p><p>说明： 在语句中，A在B的左边，并且是Right Join，所以其运算方式为：A右连接B的记录=图3公共部分记录集C＋表B记录集B1<br>在图3中即记录集C中的存在的Aid为：2 3 6 7 8<br>图2中即表B所有记录集B中存在的Bnameid为：2 3 6 7 8 11<br>表B记录集B1中存在的Bnameid=(图2中即B表中所有Bnameid)-(图3中即记录集C中存在的Aid)，最终得出为：11<br>由此得出图6中A右连接B的记录=图3公共部分记录集C＋表B记录集B1, 最终得出的结果图6中可以看出Aid及Aname非NULL的记录都为图3公共部分记录集C中的记录；Aid及Aname为NULL的Aid为11的记录就是表B记录集B1中存在的Bnameid。    </p><p>交叉连接：两张表联合没有条件情况下，条数 = 图1 * 图2</p><p>交叉连接不带WHERE子句，它返回被连接的两个表所有数据行的笛卡尔积，返回结果集合中的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内连接、左外连接、右外连接、交叉连接区别&quot;&gt;&lt;a href=&quot;#内连接、左外连接、右外连接、交叉连接区别&quot; class=&quot;headerlink&quot; title=&quot;内连接、左外连接、右外连接、交叉连接区别&quot;&gt;&lt;/a&gt;内连接、左外连接、右外连接、交叉连接区别&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="http://enfangzhong.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="关系型数据库" scheme="http://enfangzhong.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL内连接" scheme="http://enfangzhong.github.io/tags/SQL%E5%86%85%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="左外连接" scheme="http://enfangzhong.github.io/tags/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="右外连接" scheme="http://enfangzhong.github.io/tags/%E5%8F%B3%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="交叉连接" scheme="http://enfangzhong.github.io/tags/%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://enfangzhong.github.io/2018/10/10/first/"/>
    <id>http://enfangzhong.github.io/2018/10/10/first/</id>
    <published>2018-10-10T01:30:17.685Z</published>
    <updated>2018-10-10T01:33:25.115Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><style>body {  max-width: 980px;  border: 1px solid #ddd;  outline: 1300px solid #fff;  margin: 16px auto;}body .markdown-body{  padding: 45px;}@font-face {  font-family: fontawesome-mini;  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAABE0AA8AAAAAHWwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABWAAAADsAAABUIIslek9TLzIAAAGUAAAAQwAAAFY3d1HZY21hcAAAAdgAAACqAAACOvWLi0FjdnQgAAAChAAAABMAAAAgBtX/BGZwZ20AAAKYAAAFkAAAC3CKkZBZZ2FzcAAACCgAAAAIAAAACAAAABBnbHlmAAAIMAAABdQAAAjkYT9TNWhlYWQAAA4EAAAAMwAAADYQ6WvNaGhlYQAADjgAAAAfAAAAJAc6A1pobXR4AAAOWAAAACAAAAA0Kmz/7mxvY2EAAA54AAAAHAAAABwQPBJubWF4cAAADpQAAAAgAAAAIAEHC/NuYW1lAAAOtAAAAYQAAALxhQT4h3Bvc3QAABA4AAAAfgAAAMS3SYh9cHJlcAAAELgAAAB6AAAAhuVBK7x4nGNgZGBg4GIwYLBjYHJx8wlh4MtJLMljkGJgYYAAkDwymzEnMz2RgQPGA8qxgGkOIGaDiAIAJjsFSAB4nGNgZHZmnMDAysDAVMW0h4GBoQdCMz5gMGRkAooysDIzYAUBaa4pDA4Pwz+yMwf9z2KIYg5imAYUZgTJAQDcoQvQAHic7ZHNDYJAFIRnBXf94cDRIiyCKkCpwFCPJ092RcKNDoYKcN4+EmMPvpdvk539zQyAPYBCXEUJhBcCrJ5SQ9YLnLJe4qF5rdb+uWPDngNHTkta101pNyWa8lMhn6xx2dqUnW4q9YOIhAOOeueMSgsR/6ry+P7O5s6xVNg4chBsHUuFnWNJ8uZYwrw7chrsHXkODo7cB0dHOYCTY8kv0VE2WJKD6gOlWjsxAAB4nGNgQAMSEMgc9D8LhAESbAPdAHicrVZpd9NGFB15SZyELCULLWphxMRpsEYmbMGACUGyYyBdnK2VoIsUO+m+8Ynf4F/zZNpz6Dd+Wu8bLySQtOdwmpOjd+fN1czbZRJaktgL65GUmy/F1NYmjew8CemGTctRfCg7eyFlisnfBVEQrZbatx2HREQiULWusEQQ+x5ZmmR86FFGy7akV03KLT3pLlvjQb1V334aOsqxO6GkZjN0aD2yJVUYVaJIpj1S0qZlqPorSSu8v8LMV81QwohOImm8GcbQSN4bZ7TKaDW24yiKbLLcKFIkmuFBFHmU1RLn5IoJDMoHzZDyyqcR5cP8iKzYo5xWsEu20/y+L3mndzk/sV9vUbbkQB/Ijuzg7HQlX4RbW2HctJPtKFQRdtd3QmzZ7FT/Zo/ymkYDtysyvdCMYKl8hRArP6HM/iFZLZxP+ZJHo1qykRNB62VO7Es+gdbjiClxzRhZ0N3RCRHU/ZIzDPaYPh788d4plgsTAngcy3pHJZwIEylhczRJ2jByYCVliyqp9a6YOOV1WsRbwn7t2tGXzmjjUHdiPFsPHVs5UcnxaFKnmUyd2knNoykNopR0JnjMrwMoP6JJXm1jNYmVR9M4ZsaERCICLdxLU0EsO7GkKQTNoxm9uRumuXYtWqTJA/Xco/f05la4udNT2g70s0Z/VqdiOtgL0+lp5C/xadrlIkXp+ukZfkziQdYCMpEtNsOUgwdv/Q7Sy9eWHIXXBtju7fMrqH3WRPCkAfsb0B5P1SkJTIWYVYhWQGKta1mWydWsFqnI1HdDmla+rNMEinIcF8e+jHH9XzMzlpgSvt+J07MjLj1z7UsI0xx8m3U9mtepxXIBcWZ5TqdZlu/rNMfyA53mWZ7X6QhLW6ejLD/UaYHlRzodY3lBC5p038GQizDkAg6QMISlA0NYXoIhLBUMYbkIQ1gWYQjLJRjC8mMYwnIZhrC8rGXV1FNJ49qZWAZsQmBijh65zEXlaiq5VEK7aFRqQ54SbpVUFM+qf2WgXjzyhjmwFkiXyJpfMc6Vj0bl+NYVLW8aO1fAsepvH472OfFS1ouFPwX/1dZUJb1izcOTq/Abhp5sJ6o2qXh0TZfPVT26/l9UVFgL9BtIhVgoyrJscGcihI86nYZqoJVDzGzMPLTrdcuan8P9NzFCFlD9+DcUGgvcg05ZSVnt4KzV19uy3DuDcjgTLEkxN/P6VvgiI7PSfpFZyp6PfB5wBYxKZdhqA60VvNknMQ+Z3iTPBHFbUTZI2tjOBIkNHPOAefOdBCZh6qoN5E7hhg34BWFuwXknXKJ6oyyH7kXs8yik/Fun4kT2qGiMwLPZG2Gv70LKb3EMJDT5pX4MVBWhqRg1FdA0Um6oBl/G2bptQsYO9CMqdsOyrOLDxxb3lZJtGYR8pIjVo6Of1l6iTqrcfmYUl++dvgXBIDUxf3vfdHGQyrtayTJHbQNTtxqVU9eaQ+NVh+rmUfW94+wTOWuabronHnpf06rbwcVcLLD2bQ7SUiYX1PVhhQ2iy8WlUOplNEnvuAcYFhjQ71CKjf+r+th8nitVhdFxJN9O1LfR52AM/A/Yf0f1A9D3Y+hyDS7P95oTn2704WyZrqIX66foNzBrrblZugbc0HQD4iFHrY64yg18pwZxeqS5HOkh4GPdFeIBwCaAxeAT3bWM5lMAo/mMOT7A58xh0GQOgy3mMNhmzhrADnMY7DKHwR5zGHzBnHWAL5nDIGQOg4g5DJ4wJwB4yhwGXzGHwdfMYfANc+4DfMscBjFzGCTMYbCv6dYwzC1e0F2gtkFVoANTT1jcw+JQU2XI/o4Xhv29Qcz+wSCm/qjp9pD6Ey8M9WeDmPqLQUz9VdOdIfU3Xhjq7wYx9Q+DmPpMvxjLZQa/jHyXCgeUXWw+5++J9w/bxUC5AAEAAf//AA94nIVVX2hbZRQ/5/t7893s5ja9f7ouzdZ0TTqz3bRJmogbWya6bG6Cq0VbSV2ddIJjFtfIQHEig80Hda8yUN/0YQz8AyriiyD+xQd92R4HCnaCb3samnpumrpsCsLlfPf7zvedc37nL3CAtc/5W/wQZGA3tOBSY/g+TMjHmwzEoM1Q8+ZjRZY4oJhmBw5/YB6Za0yC5AkhlwA1A1yCBIBOwCII0Cj0U8BAMdUCzq05sKwkP7SlUY6fcJk4Fb/RyE79/6P5hjM/F4aZiXBoeMgzcqQ4Xi1hPqfDLG5FT+lchCVU3lYMyvuwhl1mqndQL0RsuloLywHtthLXI06OblTrhfWVnpSJ5+mwu/JdbtuN3IAnkW0LLMcRwaC7ktrlzridM6kVdyf9uO1UNBByI7JhwtG2sEwab07ORBeilWhqavJCqV0qzZTOl/7ZXQ5TbTcdcFelyGhhRDAQpdqp1FEX3w3cFTc1k9pJQkmm4ySCbSikxRP2QOfN+0tHS5MrpQuTU1Mk5nw0E5Xa0WvrOwDyGax9yB9ma6DAg82wHc43SAGTI4GjBWebOePAERFE8/AHaQpZASSTy8A4WwZiLQMQ82mFKATO0ILicRAoDm9p5P99E5b/fXG+kQYY3TYUuqmERWYoT0u/GNYL2q/4WB3LaVS+VynXsVYIcWw6DkCh3nX1D+VzlYN4LClF5yexSQos8exqZ3KVP+wtrC54u4Nznq6cq+xpMpUUnZ8FUYzE86ud0g28NOIv3Gj5/rmA3ABs7S/ywzFuQ4qyd6QxfNtiQIaEgp3w/entQg4Vcbqa16M5FfpeUB8t1+qeg7mI7cUyOe79wOk86gSxkVec4KPTX69++5x68Yubn5/F+w52z7u08sJX7fZXv8ekT/d2mILJxq6sn+SC6qEJknzLJCxyZEKwWVqYmAPBxBE/9DLeZiWHu7lcr/VytrCRuHojncNuTt9h46tmacmYisnSamdN2bZptcsmSysdVsy1PrOvOzF3xN64Rb937t/og9KHxYdcjIUqFAmIAHGHNzlns+RTPgeUYAQm9DwpNxfxbhhBHPaw3/gfTcXO2L+eJVIx5nsyGkvm9X4/f+bGkH45G0PaSjcMXTjcZyTvi3UdHoCDjQd3IDUVsgwYmUoJK/gp4JJxeRI0MKHZIkgynyIBqBTOUs6rOVCojvjZ4mCQz49ZMlMcp8QoYk6NoBfsxnJtsBohpa8iGJS+ZH7gU7NxME6cmF+t7cO9vB8d3jTWSct0ycW9ranXmolNDwmVkNnxe+8JtoztwS5rKJ0xWS95tQ/1zMYzg69MzUZnNtl1ofNbsml/OJm6f9wjRjpnu2o4MzHzn77IQkRd+1DjwMQ2pqSjGMMhyjrgTbBAKksuUm0iU7hI0aN2wOKOq7WYBSH0HGihj/jkiPxAfmwsEbfYrjMG+j3ij932Db/LV7I/xruNrhnroxjR9HRMb2nTvO0ZXOoHPk8H2ZhDPx93qcE/53sH5np/dkIP7zzhTVKdR/BAY/9ElkkR+A6lJGsqpJ4oQcTxpvBT3Kn58VkaJjgHyPEIws57xkaHh9KuVpDEpJZeMbZ5w/zBHi5NMQ4r5VphsFqID7TyB9eR4pX216c3AHxpdAwoqU9qg0ZJ6yVLKmMSz1iG2z27ifx18NkY0LPx1W/wCc2l5LrznrIsiKsqbmB78A9wIGx4tI8rjihVHJyY9pgMirenVq0yWg7Iw7eogG7ZgYM3qR9959A/fZkg6MnD/exlkmc+jWV4SB15XUR+eqC6l6ZmgPtN9z5JMfik05OV8ljylunJ4J+wA/FUaQSSKotsYsCWqaPBidBLcxkWx7XKFRIb45TGaEhjlF9uUVPqXOtcIwsXbBvfoZXIyRYFdkfnqjExH98xpnPczqzjX/uNdO1Y17Wpi5+6Ts8BXtjVFasp9KZ1mOiNbH65c5w6HgmyF2jFCZywM8mWjRc7T5Pmt0lRy7Y71+jYbpGyvwG4sH0XeJxjYGRgYADiwBB/53h+m68M3MwvgCIM1z5N/g6j///9v5H5BbMnkMvBwAQSBQCIcA9gAHicY2BkYGAO+p8FJF/8//v/F/MLBqAICuAFALYQB5kAeJxjfsHAwLwAiCNB+P9fbJjJmoGBMRUo/wKCAfO2EnQAAAAAANoBXgGcAgICVALaA1IDvAPkBAYEPARyAAEAAAANAF0ABAAAAAAAAgAUACQAcwAAAG4LcAAAAAB4nHWRzWrCQBSFT+pPqUIXLXTTzayKUohGKIibCoLuhbrrYtTRxCYZmYyKyz5Fd32HvlDfoO/QkziIFJtw9bvnnpl7ZwLgBt/wcHieGAf2UGd24Atcou+4RH3kuEweO66QXx1XyaHjGh6ROa7jFp/cwStfMVvhy7GHO+/e8QWuvcBxifqz4zL5xXGF/Oa4Sn53XMPE+3Bcx4P3M9DrvYmWoRWNQVN02kFXTPdCU4pSGQu5saE2meiLhU6timPtz3SSs9ypTCdqrJabWJoT5QQnymSRTkXgt0/UkUqVkVbN807ZdtmxdiEWRidi6HqItdErNbN+aO2612qd9sYAGmvsYRBhyUu0EGhQbfK/gzYCdElTOgSdB1eEFBIxFYkNV4RFJWPeZyyYpVQVHTHZx4y/yVGX2LGWFZri51TccUOn5B7nPefVCSPvGhVVwUl9znveO2KkhV8Wk82PZ8qwZf8OVcu1+fSmWCMw/HMOwXvKaysqM+p+cVuWag8tvv+c+xdd+4+teJxtjUEOwiAURJla24KliQfhUA2g/Sl+CKXx+loNrpzVezOLEY34Ron/0WhwQoszOvQYIKFwwQiNSbSBeO2SZ0tBP4j3zVjKNng32ZmtD1VVXCuOiw/pJ8S3WOU6l+K5UOTaDC4+2TjKMtN9KQf1ezLx/Sg/00FCvABHhjDjAAB4nGPw3sFwIihiIyNjX+QGxp0cDBwMyQUbGVidNjEwMmiBGJu5mBg5ICw+BjCLzWkX0wGgNCeQze60i8EBwmZmcNmowtgRGLHBoSNiI3OKy0Y1EG8XRwMDI4tDR3JIBEhJJBBs5mFi5NHawfi/dQNL70YmBhcADHYj9AAA) format('woff');}.markdown-body {  font-family: sans-serif;  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;  color: #333333;  overflow: hidden;  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;  font-size: 16px;  line-height: 1.6;  word-wrap: break-word;}.markdown-body a {  background: transparent;}.markdown-body a:active,.markdown-body a:hover {  outline: 0;}.markdown-body b,.markdown-body strong {  font-weight: bold;}.markdown-body mark {  background: #ff0;  color: #000;  font-style: italic;  font-weight: bold;}.markdown-body sub,.markdown-body sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}.markdown-body sup {  top: -0.5em;}.markdown-body sub {  bottom: -0.25em;}.markdown-body h1 {  font-size: 2em;  margin: 0.67em 0;}.markdown-body img {  border: 0;}.markdown-body hr {  -moz-box-sizing: content-box;  box-sizing: content-box;  height: 0;}.markdown-body pre {  overflow: auto;}.markdown-body code,.markdown-body kbd,.markdown-body pre,.markdown-body samp {  font-family: monospace, monospace;  font-size: 1em;}.markdown-body input {  color: inherit;  font: inherit;  margin: 0;}.markdown-body html input[disabled] {  cursor: default;}.markdown-body input {  line-height: normal;}.markdown-body input[type="checkbox"] {  box-sizing: border-box;  padding: 0;}.markdown-body table {  border-collapse: collapse;  border-spacing: 0;}.markdown-body td,.markdown-body th {  padding: 0;}.markdown-body .codehilitetable {  border: 0;  border-spacing: 0;}.markdown-body .codehilitetable tr {  border: 0;}.markdown-body .codehilitetable pre,.markdown-body .codehilitetable div.codehilite {  margin: 0;}.markdown-body .linenos,.markdown-body .code,.markdown-body .codehilitetable td {  border: 0;  padding: 0;}.markdown-body td:not(.linenos) .linenodiv {  padding: 0 !important;}.markdown-body .code {  width: 100%;}.markdown-body .linenos div pre,.markdown-body .linenodiv pre,.markdown-body .linenodiv {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-left-radius: 3px;  -webkit-border-bottom-left-radius: 3px;  -moz-border-radius-topleft: 3px;  -moz-border-radius-bottomleft: 3px;  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.markdown-body .code div pre,.markdown-body .code div {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-right-radius: 3px;  -webkit-border-bottom-right-radius: 3px;  -moz-border-radius-topright: 3px;  -moz-border-radius-bottomright: 3px;  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.markdown-body * {  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body input {  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";  line-height: 1.4;}.markdown-body a {  color: #4183c4;  text-decoration: none;}.markdown-body a:hover,.markdown-body a:focus,.markdown-body a:active {  text-decoration: underline;}.markdown-body hr {  height: 0;  margin: 15px 0;  overflow: hidden;  background: transparent;  border: 0;  border-bottom: 1px solid #ddd;}.markdown-body hr:before,.markdown-body hr:after {  display: table;  content: " ";}.markdown-body hr:after {  clear: both;}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6 {  margin-top: 15px;  margin-bottom: 15px;  line-height: 1.1;}.markdown-body h1 {  font-size: 30px;}.markdown-body h2 {  font-size: 21px;}.markdown-body h3 {  font-size: 16px;}.markdown-body h4 {  font-size: 14px;}.markdown-body h5 {  font-size: 12px;}.markdown-body h6 {  font-size: 11px;}.markdown-body blockquote {  margin: 0;}.markdown-body ul,.markdown-body ol {  padding: 0;  margin-top: 0;  margin-bottom: 0;}.markdown-body ol ol,.markdown-body ul ol {  list-style-type: lower-roman;}.markdown-body ul ul ol,.markdown-body ul ol ol,.markdown-body ol ul ol,.markdown-body ol ol ol {  list-style-type: lower-alpha;}.markdown-body dd {  margin-left: 0;}.markdown-body code,.markdown-body pre,.markdown-body samp {  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;  font-size: 12px;}.markdown-body pre {  margin-top: 0;  margin-bottom: 0;}.markdown-body kbd {  background-color: #e7e7e7;  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);  background-image: linear-gradient(#fefefe, #e7e7e7);  background-repeat: repeat-x;  border-radius: 2px;  border: 1px solid #cfcfcf;  color: #000;  padding: 3px 5px;  line-height: 10px;  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;  display: inline-block;}.markdown-body>*:first-child {  margin-top: 0 !important;}.markdown-body>*:last-child {  margin-bottom: 0 !important;}.markdown-body .headerlink {  font: normal 400 16px fontawesome-mini;  vertical-align: middle;  margin-left: -16px;  float: left;  display: inline-block;  text-decoration: none;  opacity: 0;  color: #333;}.markdown-body .headerlink:focus {  outline: none;}.markdown-body h1 .headerlink {  margin-top: 0.8rem;}.markdown-body h2 .headerlink,.markdown-body h3 .headerlink {  margin-top: 0.6rem;}.markdown-body h4 .headerlink {  margin-top: 0.2rem;}.markdown-body h5 .headerlink,.markdown-body h6 .headerlink {  margin-top: 0;}.markdown-body .headerlink:hover,.markdown-body h1:hover .headerlink,.markdown-body h2:hover .headerlink,.markdown-body h3:hover .headerlink,.markdown-body h4:hover .headerlink,.markdown-body h5:hover .headerlink,.markdown-body h6:hover .headerlink {  opacity: 1;  text-decoration: none;}.markdown-body h1 {  padding-bottom: 0.3em;  font-size: 2.25em;  line-height: 1.2;  border-bottom: 1px solid #eee;}.markdown-body h2 {  padding-bottom: 0.3em;  font-size: 1.75em;  line-height: 1.225;  border-bottom: 1px solid #eee;}.markdown-body h3 {  font-size: 1.5em;  line-height: 1.43;}.markdown-body h4 {  font-size: 1.25em;}.markdown-body h5 {  font-size: 1em;}.markdown-body h6 {  font-size: 1em;  color: #777;}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body .admonition {  margin-top: 0;  margin-bottom: 16px;}.markdown-body hr {  height: 4px;  padding: 0;  margin: 16px 0;  background-color: #e7e7e7;  border: 0 none;}.markdown-body ul,.markdown-body ol {  padding-left: 2em;}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul {  margin-top: 0;  margin-bottom: 0;}.markdown-body li>p {  margin-top: 16px;}.markdown-body dl {  padding: 0;}.markdown-body dl dt {  padding: 0;  margin-top: 16px;  font-size: 1em;  font-style: italic;  font-weight: bold;}.markdown-body dl dd {  padding: 0 16px;  margin-bottom: 16px;}.markdown-body blockquote {  padding: 0 15px;  color: #777;  border-left: 4px solid #ddd;}.markdown-body blockquote>:first-child {  margin-top: 0;}.markdown-body blockquote>:last-child {  margin-bottom: 0;}.markdown-body table {  display: block;  width: 100%;  overflow: auto;  word-break: normal;  word-break: keep-all;}.markdown-body table th {  font-weight: bold;}.markdown-body table th,.markdown-body table td {  padding: 6px 13px;  border: 1px solid #ddd;}.markdown-body table tr {  background-color: #fff;  border-top: 1px solid #ccc;}.markdown-body table tr:nth-child(2n) {  background-color: #f8f8f8;}.markdown-body img {  max-width: 100%;  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body code,.markdown-body samp {  padding: 0;  padding-top: 0.2em;  padding-bottom: 0.2em;  margin: 0;  font-size: 85%;  background-color: rgba(0,0,0,0.04);  border-radius: 3px;}.markdown-body code:before,.markdown-body code:after {  letter-spacing: -0.2em;  content: "\00a0";}.markdown-body pre>code {  padding: 0;  margin: 0;  font-size: 100%;  word-break: normal;  white-space: pre;  background: transparent;  border: 0;}.markdown-body .codehilite {  margin-bottom: 16px;}.markdown-body .codehilite pre,.markdown-body pre {  padding: 16px;  overflow: auto;  font-size: 85%;  line-height: 1.45;  background-color: #f7f7f7;  border-radius: 3px;}.markdown-body .codehilite pre {  margin-bottom: 0;  word-break: normal;}.markdown-body pre {  word-wrap: normal;}.markdown-body pre code {  display: inline;  max-width: initial;  padding: 0;  margin: 0;  overflow: initial;  line-height: inherit;  word-wrap: normal;  background-color: transparent;  border: 0;}.markdown-body pre code:before,.markdown-body pre code:after {  content: normal;}/* Admonition */.markdown-body .admonition {  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  position: relative;  border-radius: 3px;  border: 1px solid #e0e0e0;  border-left: 6px solid #333;  padding: 10px 10px 10px 30px;}.markdown-body .admonition table {  color: #333;}.markdown-body .admonition p {  padding: 0;}.markdown-body .admonition-title {  font-weight: bold;  margin: 0;}.markdown-body .admonition>.admonition-title {  color: #333;}.markdown-body .attention>.admonition-title {  color: #a6d796;}.markdown-body .caution>.admonition-title {  color: #d7a796;}.markdown-body .hint>.admonition-title {  color: #96c6d7;}.markdown-body .danger>.admonition-title {  color: #c25f77;}.markdown-body .question>.admonition-title {  color: #96a6d7;}.markdown-body .note>.admonition-title {  color: #d7c896;}.markdown-body .admonition:before,.markdown-body .attention:before,.markdown-body .caution:before,.markdown-body .hint:before,.markdown-body .danger:before,.markdown-body .question:before,.markdown-body .note:before {  font: normal normal 16px fontawesome-mini;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  line-height: 1.5;  color: #333;  position: absolute;  left: 0;  top: 0;  padding-top: 10px;  padding-left: 10px;}.markdown-body .admonition:before {  content: "\f056\00a0";  color: 333;}.markdown-body .attention:before {  content: "\f058\00a0";  color: #a6d796;}.markdown-body .caution:before {  content: "\f06a\00a0";  color: #d7a796;}.markdown-body .hint:before {  content: "\f05a\00a0";  color: #96c6d7;}.markdown-body .danger:before {  content: "\f057\00a0";  color: #c25f77;}.markdown-body .question:before {  content: "\f059\00a0";  color: #96a6d7;}.markdown-body .note:before {  content: "\f040\00a0";  color: #d7c896;}.markdown-body .admonition::after {  content: normal;}.markdown-body .attention {  border-left: 6px solid #a6d796;}.markdown-body .caution {  border-left: 6px solid #d7a796;}.markdown-body .hint {  border-left: 6px solid #96c6d7;}.markdown-body .danger {  border-left: 6px solid #c25f77;}.markdown-body .question {  border-left: 6px solid #96a6d7;}.markdown-body .note {  border-left: 6px solid #d7c896;}.markdown-body .admonition>*:first-child {  margin-top: 0 !important;}.markdown-body .admonition>*:last-child {  margin-bottom: 0 !important;}/* progress bar*/.markdown-body .progress {  display: block;  width: 300px;  margin: 10px 0;  height: 24px;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #ededed;  position: relative;  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);}.markdown-body .progress-label {  position: absolute;  text-align: center;  font-weight: bold;  width: 100%; margin: 0;  line-height: 24px;  color: #333;  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;  -webkit-font-smoothing: antialiased !important;  white-space: nowrap;  overflow: hidden;}.markdown-body .progress-bar {  height: 24px;  float: left;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #96c6d7;  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);  background-size: 30px 30px;  background-image: -webkit-linear-gradient(    135deg, rgba(255, 255, 255, .4) 27%,    transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%,    transparent 77%, transparent  );  background-image: -moz-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -ms-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -o-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );}.markdown-body .progress-100plus .progress-bar {  background-color: #a6d796;}.markdown-body .progress-80plus .progress-bar {  background-color: #c6d796;}.markdown-body .progress-60plus .progress-bar {  background-color: #d7c896;}.markdown-body .progress-40plus .progress-bar {  background-color: #d7a796;}.markdown-body .progress-20plus .progress-bar {  background-color: #d796a6;}.markdown-body .progress-0plus .progress-bar {  background-color: #c25f77;}.markdown-body .candystripe-animate .progress-bar{  -webkit-animation: animate-stripes 3s linear infinite;  -moz-animation: animate-stripes 3s linear infinite;  animation: animate-stripes 3s linear infinite;}@-webkit-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@-moz-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}.markdown-body .gloss .progress-bar {  box-shadow:    inset 0 4px 12px rgba(255, 255, 255, .7),    inset 0 -12px 0 rgba(0, 0, 0, .05);}/* Multimarkdown Critic Blocks */.markdown-body .critic_mark {  background: #ff0;}.markdown-body .critic_delete {  color: #c82829;  text-decoration: line-through;}.markdown-body .critic_insert {  color: #718c00 ;  text-decoration: underline;}.markdown-body .critic_comment {  color: #8e908c;  font-style: italic;}.markdown-body .headeranchor {  font: normal normal 16px fontawesome-mini;  line-height: 1;  display: inline-block;  text-decoration: none;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;}.headeranchor:before {  content: '\e157';}.markdown-body .task-list-item {  list-style-type: none;}.markdown-body .task-list-item+.task-list-item {  margin-top: 3px;}.markdown-body .task-list-item input {  margin: 0 4px 0.25em -20px;  vertical-align: middle;}/* Media */@media only screen and (min-width: 480px) {  .markdown-body {    font-size:14px;  }}@media only screen and (min-width: 768px) {  .markdown-body {    font-size:16px;  }}@media print {  .markdown-body * {    background: transparent !important;    color: black !important;    filter:none !important;    -ms-filter: none !important;  }  .markdown-body {    font-size:12pt;    max-width:100%;    outline:none;    border: 0;  }  .markdown-body a,  .markdown-body a:visited {    text-decoration: underline;  }  .markdown-body .headeranchor-link {    display: none;  }  .markdown-body a[href]:after {    content: " (" attr(href) ")";  }  .markdown-body abbr[title]:after {    content: " (" attr(title) ")";  }  .markdown-body .ir a:after,  .markdown-body a[href^="javascript:"]:after,  .markdown-body a[href^="#"]:after {    content: "";  }  .markdown-body pre {    white-space: pre;    white-space: pre-wrap;    word-wrap: break-word;  }  .markdown-body pre,  .markdown-body blockquote {    border: 1px solid #999;    padding-right: 1em;    page-break-inside: avoid;  }  .markdown-body .progress,  .markdown-body .progress-bar {    -moz-box-shadow: none;    -webkit-box-shadow: none;    box-shadow: none;  }  .markdown-body .progress {    border: 1px solid #ddd;  }  .markdown-body .progress-bar {    height: 22px;    border-right: 1px solid #ddd;  }  .markdown-body tr,  .markdown-body img {    page-break-inside: avoid;  }  .markdown-body img {    max-width: 100% !important;  }  .markdown-body p,  .markdown-body h2,  .markdown-body h3 {    orphans: 3;    widows: 3;  }  .markdown-body h2,  .markdown-body h3 {    page-break-after: avoid;  }}</style><style>/*github*/.codehilite {background-color:#fff;color:#333333;}.codehilite .hll {background-color:#ffffcc;}.codehilite .c{color:#999988;font-style:italic}.codehilite .err{color:#a61717;background-color:#e3d2d2}.codehilite .k{font-weight:bold}.codehilite .o{font-weight:bold}.codehilite .cm{color:#999988;font-style:italic}.codehilite .cp{color:#999999;font-weight:bold}.codehilite .c1{color:#999988;font-style:italic}.codehilite .cs{color:#999999;font-weight:bold;font-style:italic}.codehilite .gd{color:#000000;background-color:#ffdddd}.codehilite .ge{font-style:italic}.codehilite .gr{color:#aa0000}.codehilite .gh{color:#999999}.codehilite .gi{color:#000000;background-color:#ddffdd}.codehilite .go{color:#888888}.codehilite .gp{color:#555555}.codehilite .gs{font-weight:bold}.codehilite .gu{color:#800080;font-weight:bold}.codehilite .gt{color:#aa0000}.codehilite .kc{font-weight:bold}.codehilite .kd{font-weight:bold}.codehilite .kn{font-weight:bold}.codehilite .kp{font-weight:bold}.codehilite .kr{font-weight:bold}.codehilite .kt{color:#445588;font-weight:bold}.codehilite .m{color:#009999}.codehilite .s{color:#dd1144}.codehilite .n{color:#333333}.codehilite .na{color:teal}.codehilite .nb{color:#0086b3}.codehilite .nc{color:#445588;font-weight:bold}.codehilite .no{color:teal}.codehilite .ni{color:purple}.codehilite .ne{color:#990000;font-weight:bold}.codehilite .nf{color:#990000;font-weight:bold}.codehilite .nn{color:#555555}.codehilite .nt{color:navy}.codehilite .nv{color:teal}.codehilite .ow{font-weight:bold}.codehilite .w{color:#bbbbbb}.codehilite .mf{color:#009999}.codehilite .mh{color:#009999}.codehilite .mi{color:#009999}.codehilite .mo{color:#009999}.codehilite .sb{color:#dd1144}.codehilite .sc{color:#dd1144}.codehilite .sd{color:#dd1144}.codehilite .s2{color:#dd1144}.codehilite .se{color:#dd1144}.codehilite .sh{color:#dd1144}.codehilite .si{color:#dd1144}.codehilite .sx{color:#dd1144}.codehilite .sr{color:#009926}.codehilite .s1{color:#dd1144}.codehilite .ss{color:#990073}.codehilite .bp{color:#999999}.codehilite .vc{color:teal}.codehilite .vg{color:teal}.codehilite .vi{color:teal}.codehilite .il{color:#009999}.codehilite .gc{color:#999;background-color:#EAF2F5}</style><title>first</title></head><body><article class="markdown-body"><h1 id="_1">大标题<a class="headerlink" href="#_1" title="Permanent link"></a></h1><h2 id="_2">二级标题<a class="headerlink" href="#_2" title="Permanent link"></a></h2><ul><li>第一点</li><li>第二点</li><li>第三点</li></ul></article></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;body {
  max-width: 980px;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://enfangzhong.github.io/2018/10/10/first/"/>
    <id>http://enfangzhong.github.io/2018/10/10/first/</id>
    <published>2018-10-10T01:28:54.471Z</published>
    <updated>2018-10-10T01:39:43.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><ul><li>第一点</li><li>第二点</li><li>第三点</li></ul><p>！<a href="">博学谷</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大标题&quot;&gt;&lt;a href=&quot;#大标题&quot; class=&quot;headerlink&quot; title=&quot;大标题&quot;&gt;&lt;/a&gt;大标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://enfangzhong.github.io/2018/09/17/test01/"/>
    <id>http://enfangzhong.github.io/2018/09/17/test01/</id>
    <published>2018-09-17T05:24:18.247Z</published>
    <updated>2018-09-17T05:24:18.247Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>  <meta charset="utf-8">  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">  <title>开始使用layui</title>  <link rel="stylesheet" href="../layui/css/layui.css"></head><body> <!-- 你的HTML代码 --> <script src="../layui/layui.js"></script><script>//一般直接写在一个js文件中layui.use(['layer', 'form'], function(){  var layer = layui.layer  ,form = layui.form;    layer.msg('Hello World');});</script> </body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://enfangzhong.github.io/2018/09/12/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB%E5%8A%9F%E8%83%BD/"/>
    <id>http://enfangzhong.github.io/2018/09/12/Hexo博客添加在线联系功能/</id>
    <published>2018-09-12T03:33:25.674Z</published>
    <updated>2018-09-12T03:33:26.367Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="tags" content=",- 博客,- git,- hexo,- 博客优化"><meta name="categories" content=""><meta name="date" content="2018-08-29 21:03:11"><style>body {  max-width: 980px;  border: 1px solid #ddd;  outline: 1300px solid #fff;  margin: 16px auto;}body .markdown-body{  padding: 45px;}@font-face {  font-family: fontawesome-mini;  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');}.markdown-body {  font-family: sans-serif;  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;  color: #333333;  overflow: hidden;  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;  font-size: 16px;  line-height: 1.6;  word-wrap: break-word;}.markdown-body a {  background: transparent;}.markdown-body a:active,.markdown-body a:hover {  outline: 0;}.markdown-body b,.markdown-body strong {  font-weight: bold;}.markdown-body mark {  background: #ff0;  color: #000;  font-style: italic;  font-weight: bold;}.markdown-body sub,.markdown-body sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}.markdown-body sup {  top: -0.5em;}.markdown-body sub {  bottom: -0.25em;}.markdown-body h1 {  font-size: 2em;  margin: 0.67em 0;}.markdown-body img {  border: 0;}.markdown-body hr {  -moz-box-sizing: content-box;  box-sizing: content-box;  height: 0;}.markdown-body pre {  overflow: auto;}.markdown-body code,.markdown-body kbd,.markdown-body pre,.markdown-body samp {  font-family: monospace, monospace;  font-size: 1em;}.markdown-body input {  color: inherit;  font: inherit;  margin: 0;}.markdown-body html input[disabled] {  cursor: default;}.markdown-body input {  line-height: normal;}.markdown-body input[type="checkbox"] {  box-sizing: border-box;  padding: 0;}.markdown-body table {  border-collapse: collapse;  border-spacing: 0;}.markdown-body td,.markdown-body th {  padding: 0;}.markdown-body .codehilitetable {  border: 0;  border-spacing: 0;}.markdown-body .codehilitetable tr {  border: 0;}.markdown-body .codehilitetable pre,.markdown-body .codehilitetable div.codehilite {  margin: 0;}.markdown-body .linenos,.markdown-body .code,.markdown-body .codehilitetable td {  border: 0;  padding: 0;}.markdown-body td:not(.linenos) .linenodiv {  padding: 0 !important;}.markdown-body .code {  width: 100%;}.markdown-body .linenos div pre,.markdown-body .linenodiv pre,.markdown-body .linenodiv {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-left-radius: 3px;  -webkit-border-bottom-left-radius: 3px;  -moz-border-radius-topleft: 3px;  -moz-border-radius-bottomleft: 3px;  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.markdown-body .code div pre,.markdown-body .code div {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-right-radius: 3px;  -webkit-border-bottom-right-radius: 3px;  -moz-border-radius-topright: 3px;  -moz-border-radius-bottomright: 3px;  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.markdown-body * {  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body input {  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";  line-height: 1.4;}.markdown-body a {  color: #4183c4;  text-decoration: none;}.markdown-body a:hover,.markdown-body a:focus,.markdown-body a:active {  text-decoration: underline;}.markdown-body hr {  height: 0;  margin: 15px 0;  overflow: hidden;  background: transparent;  border: 0;  border-bottom: 1px solid #ddd;}.markdown-body hr:before,.markdown-body hr:after {  display: table;  content: " ";}.markdown-body hr:after {  clear: both;}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6 {  margin-top: 15px;  margin-bottom: 15px;  line-height: 1.1;}.markdown-body h1 {  font-size: 30px;}.markdown-body h2 {  font-size: 21px;}.markdown-body h3 {  font-size: 16px;}.markdown-body h4 {  font-size: 14px;}.markdown-body h5 {  font-size: 12px;}.markdown-body h6 {  font-size: 11px;}.markdown-body blockquote {  margin: 0;}.markdown-body ul,.markdown-body ol {  padding: 0;  margin-top: 0;  margin-bottom: 0;}.markdown-body ol ol,.markdown-body ul ol {  list-style-type: lower-roman;}.markdown-body ul ul ol,.markdown-body ul ol ol,.markdown-body ol ul ol,.markdown-body ol ol ol {  list-style-type: lower-alpha;}.markdown-body dd {  margin-left: 0;}.markdown-body code,.markdown-body pre,.markdown-body samp {  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;  font-size: 12px;}.markdown-body pre {  margin-top: 0;  margin-bottom: 0;}.markdown-body kbd {  background-color: #e7e7e7;  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);  background-image: linear-gradient(#fefefe, #e7e7e7);  background-repeat: repeat-x;  border-radius: 2px;  border: 1px solid #cfcfcf;  color: #000;  padding: 3px 5px;  line-height: 10px;  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;  display: inline-block;}.markdown-body>*:first-child {  margin-top: 0 !important;}.markdown-body>*:last-child {  margin-bottom: 0 !important;}.markdown-body .headerlink {  font: normal 400 16px fontawesome-mini;  vertical-align: middle;  margin-left: -16px;  float: left;  display: inline-block;  text-decoration: none;  opacity: 0;  color: #333;}.markdown-body .headerlink:focus {  outline: none;}.markdown-body h1 .headerlink {  margin-top: 0.8rem;}.markdown-body h2 .headerlink,.markdown-body h3 .headerlink {  margin-top: 0.6rem;}.markdown-body h4 .headerlink {  margin-top: 0.2rem;}.markdown-body h5 .headerlink,.markdown-body h6 .headerlink {  margin-top: 0;}.markdown-body .headerlink:hover,.markdown-body h1:hover .headerlink,.markdown-body h2:hover .headerlink,.markdown-body h3:hover .headerlink,.markdown-body h4:hover .headerlink,.markdown-body h5:hover .headerlink,.markdown-body h6:hover .headerlink {  opacity: 1;  text-decoration: none;}.markdown-body h1 {  padding-bottom: 0.3em;  font-size: 2.25em;  line-height: 1.2;  border-bottom: 1px solid #eee;}.markdown-body h2 {  padding-bottom: 0.3em;  font-size: 1.75em;  line-height: 1.225;  border-bottom: 1px solid #eee;}.markdown-body h3 {  font-size: 1.5em;  line-height: 1.43;}.markdown-body h4 {  font-size: 1.25em;}.markdown-body h5 {  font-size: 1em;}.markdown-body h6 {  font-size: 1em;  color: #777;}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body .admonition {  margin-top: 0;  margin-bottom: 16px;}.markdown-body hr {  height: 4px;  padding: 0;  margin: 16px 0;  background-color: #e7e7e7;  border: 0 none;}.markdown-body ul,.markdown-body ol {  padding-left: 2em;}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul {  margin-top: 0;  margin-bottom: 0;}.markdown-body li>p {  margin-top: 16px;}.markdown-body dl {  padding: 0;}.markdown-body dl dt {  padding: 0;  margin-top: 16px;  font-size: 1em;  font-style: italic;  font-weight: bold;}.markdown-body dl dd {  padding: 0 16px;  margin-bottom: 16px;}.markdown-body blockquote {  padding: 0 15px;  color: #777;  border-left: 4px solid #ddd;}.markdown-body blockquote>:first-child {  margin-top: 0;}.markdown-body blockquote>:last-child {  margin-bottom: 0;}.markdown-body table {  display: block;  width: 100%;  overflow: auto;  word-break: normal;  word-break: keep-all;}.markdown-body table th {  font-weight: bold;}.markdown-body table th,.markdown-body table td {  padding: 6px 13px;  border: 1px solid #ddd;}.markdown-body table tr {  background-color: #fff;  border-top: 1px solid #ccc;}.markdown-body table tr:nth-child(2n) {  background-color: #f8f8f8;}.markdown-body img {  max-width: 100%;  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body code,.markdown-body samp {  padding: 0;  padding-top: 0.2em;  padding-bottom: 0.2em;  margin: 0;  font-size: 85%;  background-color: rgba(0,0,0,0.04);  border-radius: 3px;}.markdown-body code:before,.markdown-body code:after {  letter-spacing: -0.2em;  content: "\00a0";}.markdown-body pre>code {  padding: 0;  margin: 0;  font-size: 100%;  word-break: normal;  white-space: pre;  background: transparent;  border: 0;}.markdown-body .codehilite {  margin-bottom: 16px;}.markdown-body .codehilite pre,.markdown-body pre {  padding: 16px;  overflow: auto;  font-size: 85%;  line-height: 1.45;  background-color: #f7f7f7;  border-radius: 3px;}.markdown-body .codehilite pre {  margin-bottom: 0;  word-break: normal;}.markdown-body pre {  word-wrap: normal;}.markdown-body pre code {  display: inline;  max-width: initial;  padding: 0;  margin: 0;  overflow: initial;  line-height: inherit;  word-wrap: normal;  background-color: transparent;  border: 0;}.markdown-body pre code:before,.markdown-body pre code:after {  content: normal;}/* Admonition */.markdown-body .admonition {  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  position: relative;  border-radius: 3px;  border: 1px solid #e0e0e0;  border-left: 6px solid #333;  padding: 10px 10px 10px 30px;}.markdown-body .admonition table {  color: #333;}.markdown-body .admonition p {  padding: 0;}.markdown-body .admonition-title {  font-weight: bold;  margin: 0;}.markdown-body .admonition>.admonition-title {  color: #333;}.markdown-body .attention>.admonition-title {  color: #a6d796;}.markdown-body .caution>.admonition-title {  color: #d7a796;}.markdown-body .hint>.admonition-title {  color: #96c6d7;}.markdown-body .danger>.admonition-title {  color: #c25f77;}.markdown-body .question>.admonition-title {  color: #96a6d7;}.markdown-body .note>.admonition-title {  color: #d7c896;}.markdown-body .admonition:before,.markdown-body .attention:before,.markdown-body .caution:before,.markdown-body .hint:before,.markdown-body .danger:before,.markdown-body .question:before,.markdown-body .note:before {  font: normal normal 16px fontawesome-mini;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  line-height: 1.5;  color: #333;  position: absolute;  left: 0;  top: 0;  padding-top: 10px;  padding-left: 10px;}.markdown-body .admonition:before {  content: "\f056\00a0";  color: 333;}.markdown-body .attention:before {  content: "\f058\00a0";  color: #a6d796;}.markdown-body .caution:before {  content: "\f06a\00a0";  color: #d7a796;}.markdown-body .hint:before {  content: "\f05a\00a0";  color: #96c6d7;}.markdown-body .danger:before {  content: "\f057\00a0";  color: #c25f77;}.markdown-body .question:before {  content: "\f059\00a0";  color: #96a6d7;}.markdown-body .note:before {  content: "\f040\00a0";  color: #d7c896;}.markdown-body .admonition::after {  content: normal;}.markdown-body .attention {  border-left: 6px solid #a6d796;}.markdown-body .caution {  border-left: 6px solid #d7a796;}.markdown-body .hint {  border-left: 6px solid #96c6d7;}.markdown-body .danger {  border-left: 6px solid #c25f77;}.markdown-body .question {  border-left: 6px solid #96a6d7;}.markdown-body .note {  border-left: 6px solid #d7c896;}.markdown-body .admonition>*:first-child {  margin-top: 0 !important;}.markdown-body .admonition>*:last-child {  margin-bottom: 0 !important;}/* progress bar*/.markdown-body .progress {  display: block;  width: 300px;  margin: 10px 0;  height: 24px;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #ededed;  position: relative;  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);}.markdown-body .progress-label {  position: absolute;  text-align: center;  font-weight: bold;  width: 100%; margin: 0;  line-height: 24px;  color: #333;  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;  -webkit-font-smoothing: antialiased !important;  white-space: nowrap;  overflow: hidden;}.markdown-body .progress-bar {  height: 24px;  float: left;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #96c6d7;  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);  background-size: 30px 30px;  background-image: -webkit-linear-gradient(    135deg, rgba(255, 255, 255, .4) 27%,    transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%,    transparent 77%, transparent  );  background-image: -moz-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -ms-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -o-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );}.markdown-body .progress-100plus .progress-bar {  background-color: #a6d796;}.markdown-body .progress-80plus .progress-bar {  background-color: #c6d796;}.markdown-body .progress-60plus .progress-bar {  background-color: #d7c896;}.markdown-body .progress-40plus .progress-bar {  background-color: #d7a796;}.markdown-body .progress-20plus .progress-bar {  background-color: #d796a6;}.markdown-body .progress-0plus .progress-bar {  background-color: #c25f77;}.markdown-body .candystripe-animate .progress-bar{  -webkit-animation: animate-stripes 3s linear infinite;  -moz-animation: animate-stripes 3s linear infinite;  animation: animate-stripes 3s linear infinite;}@-webkit-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@-moz-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}.markdown-body .gloss .progress-bar {  box-shadow:    inset 0 4px 12px rgba(255, 255, 255, .7),    inset 0 -12px 0 rgba(0, 0, 0, .05);}/* Multimarkdown Critic Blocks */.markdown-body .critic_mark {  background: #ff0;}.markdown-body .critic_delete {  color: #c82829;  text-decoration: line-through;}.markdown-body .critic_insert {  color: #718c00 ;  text-decoration: underline;}.markdown-body .critic_comment {  color: #8e908c;  font-style: italic;}.markdown-body .headeranchor {  font: normal normal 16px fontawesome-mini;  line-height: 1;  display: inline-block;  text-decoration: none;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;}.headeranchor:before {  content: '\e157';}.markdown-body .task-list-item {  list-style-type: none;}.markdown-body .task-list-item+.task-list-item {  margin-top: 3px;}.markdown-body .task-list-item input {  margin: 0 4px 0.25em -20px;  vertical-align: middle;}/* Media */@media only screen and (min-width: 480px) {  .markdown-body {    font-size:14px;  }}@media only screen and (min-width: 768px) {  .markdown-body {    font-size:16px;  }}@media print {  .markdown-body * {    background: transparent !important;    color: black !important;    filter:none !important;    -ms-filter: none !important;  }  .markdown-body {    font-size:12pt;    max-width:100%;    outline:none;    border: 0;  }  .markdown-body a,  .markdown-body a:visited {    text-decoration: underline;  }  .markdown-body .headeranchor-link {    display: none;  }  .markdown-body a[href]:after {    content: " (" attr(href) ")";  }  .markdown-body abbr[title]:after {    content: " (" attr(title) ")";  }  .markdown-body .ir a:after,  .markdown-body a[href^="javascript:"]:after,  .markdown-body a[href^="#"]:after {    content: "";  }  .markdown-body pre {    white-space: pre;    white-space: pre-wrap;    word-wrap: break-word;  }  .markdown-body pre,  .markdown-body blockquote {    border: 1px solid #999;    padding-right: 1em;    page-break-inside: avoid;  }  .markdown-body .progress,  .markdown-body .progress-bar {    -moz-box-shadow: none;    -webkit-box-shadow: none;    box-shadow: none;  }  .markdown-body .progress {    border: 1px solid #ddd;  }  .markdown-body .progress-bar {    height: 22px;    border-right: 1px solid #ddd;  }  .markdown-body tr,  .markdown-body img {    page-break-inside: avoid;  }  .markdown-body img {    max-width: 100% !important;  }  .markdown-body p,  .markdown-body h2,  .markdown-body h3 {    orphans: 3;    widows: 3;  }  .markdown-body h2,  .markdown-body h3 {    page-break-after: avoid;  }}</style><style>/*github*/.codehilite {background-color:#fff;color:#333333;}.codehilite .hll {background-color:#ffffcc;}.codehilite .c{color:#999988;font-style:italic}.codehilite .err{color:#a61717;background-color:#e3d2d2}.codehilite .k{font-weight:bold}.codehilite .o{font-weight:bold}.codehilite .cm{color:#999988;font-style:italic}.codehilite .cp{color:#999999;font-weight:bold}.codehilite .c1{color:#999988;font-style:italic}.codehilite .cs{color:#999999;font-weight:bold;font-style:italic}.codehilite .gd{color:#000000;background-color:#ffdddd}.codehilite .ge{font-style:italic}.codehilite .gr{color:#aa0000}.codehilite .gh{color:#999999}.codehilite .gi{color:#000000;background-color:#ddffdd}.codehilite .go{color:#888888}.codehilite .gp{color:#555555}.codehilite .gs{font-weight:bold}.codehilite .gu{color:#800080;font-weight:bold}.codehilite .gt{color:#aa0000}.codehilite .kc{font-weight:bold}.codehilite .kd{font-weight:bold}.codehilite .kn{font-weight:bold}.codehilite .kp{font-weight:bold}.codehilite .kr{font-weight:bold}.codehilite .kt{color:#445588;font-weight:bold}.codehilite .m{color:#009999}.codehilite .s{color:#dd1144}.codehilite .n{color:#333333}.codehilite .na{color:teal}.codehilite .nb{color:#0086b3}.codehilite .nc{color:#445588;font-weight:bold}.codehilite .no{color:teal}.codehilite .ni{color:purple}.codehilite .ne{color:#990000;font-weight:bold}.codehilite .nf{color:#990000;font-weight:bold}.codehilite .nn{color:#555555}.codehilite .nt{color:navy}.codehilite .nv{color:teal}.codehilite .ow{font-weight:bold}.codehilite .w{color:#bbbbbb}.codehilite .mf{color:#009999}.codehilite .mh{color:#009999}.codehilite .mi{color:#009999}.codehilite .mo{color:#009999}.codehilite .sb{color:#dd1144}.codehilite .sc{color:#dd1144}.codehilite .sd{color:#dd1144}.codehilite .s2{color:#dd1144}.codehilite .se{color:#dd1144}.codehilite .sh{color:#dd1144}.codehilite .si{color:#dd1144}.codehilite .sx{color:#dd1144}.codehilite .sr{color:#009926}.codehilite .s1{color:#dd1144}.codehilite .ss{color:#990073}.codehilite .bp{color:#999999}.codehilite .vc{color:teal}.codehilite .vg{color:teal}.codehilite .vi{color:teal}.codehilite .il{color:#009999}.codehilite .gc{color:#999;background-color:#EAF2F5}</style><title>Hexo博客添加在线联系功能</title></head><body><article class="markdown-body"><ul><li>搭建博客</li><li>hexo博客</li></ul><hr><h1 id="hexo">Hexo博客添加在线联系功能<a class="headerlink" href="#hexo" title="Permanent link"></a></h1><p>Hexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p><p>最终的效果可以参考我博客的右下角,有个聊天的按钮,效果如下所示:<img alt="" src="https://i.loli.net/2018/08/29/5b867bfc05324.png">配置方法如下:首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:<img alt="" src="https://i.loli.net/2018/08/29/5b867bfc134be.png">以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下<div class="codehilite"><pre></pre></div></p><p>接着打开主题配置文件_config.yml，添加如下代码：<div class="codehilite"><pre># Online contact daovoice: truedaovoice_app_id: 这里输入前面获取的app_id</pre></div>最后执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s就能看到效果了。</p><p>需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:<img alt="" src="https://i.loli.net/2018/08/29/5b867bfc0a0c8.png"></p><p>最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:<img alt="" src="https://i.loli.net/2018/08/29/5b867bfc055c2.png">效果展示: <a href="https://enfangzhong.github.io/">酱油哥博客</a></p><p><strong>欢迎访问我的博客</strong><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p></article></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;tags&quot; content=&quot;,- 博客,- git,- hexo,- 博客优化&quot;&gt;
&lt;meta name=&quot;categories&quot; content=&quot;&quot;&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>20180906-Git笔记</title>
    <link href="http://enfangzhong.github.io/2018/09/06/20180906git%E7%AC%94%E8%AE%B0/"/>
    <id>http://enfangzhong.github.io/2018/09/06/20180906git笔记/</id>
    <published>2018-09-06T03:16:28.000Z</published>
    <updated>2019-04-26T22:49:09.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h2><p>使用git init命令。</p><h2 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h2><p>分两步：</p><ul><li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></li><li>使用命令git commit -m <message>，完成。</message></li></ul><h2 id="查看git仓库状态"><a href="#查看git仓库状态" class="headerlink" title="查看git仓库状态"></a>查看git仓库状态</h2><p>要随时掌握工作区的状态，使用git status命令。</p><p>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p><ul><li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>如：git reset –hard HEAD^</p></li><li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。<br>如：git reset –hard commit_id</p></li></ul><p>git diff HEAD – readme.txt：<br>查看工作区和版本库里面最新版本的区别</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>git checkout – readme.txt<br>把readme.txt文件在工作区的修改全部撤销</p><ul><li><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ul><p>就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态</p><p>git reset HEAD <file><br>可以把暂存区的修改撤销掉（unstage），重新放回工作区</file></p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</file></li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li></ul><p>git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。<br>git rm –cached <file>…</file></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建SSH Key：<br>$ ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“<br>github添加SHH</p><p>本地仓库进行远程同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>第一次push加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来</p><p>以后只要本地作了提交，就可以通过命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>远程仓库tips:</p><ul><li><p>要关联一个远程库，使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git；</span><br></pre></td></tr></table></figure></li><li><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p></li></ul><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h2 id="分支管理（重要）"><a href="#分支管理（重要）" class="headerlink" title="分支管理（重要）"></a>分支管理（重要）</h2><p>master指向最新的提交<br>HEAD指向的就是当前分支</p><p>只有master分支的时候：<br>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="/2018/09/06/20180906git笔记/images/20180906111628/20180906012830969.png" alt=""></p><p>从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变<br><img src="/2018/09/06/20180906git笔记/images/20180906111628/20180906013006354.png" alt=""><br>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：<br><img src="/2018/09/06/20180906git笔记/images/20180906111628/20180906013104230.png" alt=""><br>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：<br><img src="/2018/09/06/20180906git笔记/images/20180906111628/20180906013153959.png" alt=""></p><p>下面开始实战。<br>首先，我们创建dev分支，然后切换到dev分支：<br>git checkout -b dev</p><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></p><p>git branch命令查看当前分支</p><p>把dev分支的工作成果合并到master分支上:<br>git merge dev</p><p>合并后删除分支：<br>git branch -d dev</p><p>总结：<br>Git鼓励大量使用分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure></p><p>本地库上使用命令git remote add把它和码云的远程库关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure></p><p>git remote -v查看远程库信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure></p><p>删除已关联的名为origin的远程库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><p>关联GitHub的远程库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure></p><p>关联码云的远程库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到GitHub，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure></p><p>如果要推送到码云，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure></p><h2 id="为开源项目贡献代码"><a href="#为开源项目贡献代码" class="headerlink" title="为开源项目贡献代码"></a>为开源项目贡献代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:enfangzhong/bootstrap.git</span><br></pre></td></tr></table></figure><p>添加推特公司bootstrap项目远程仓库<br>git remote add upstream <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:twbs/bootstrap.git</p><p>查看建立连接的远程仓库<br><img src="/2018/09/06/20180906git笔记/images/20180906git笔记/20180906023141140.png" alt=""></p><p>1、首先拉取推特公司最新代码<br>git pull upstream master</p><p>2、自己创建分支<br>git checkout -b feature/add_sth</p><p>然后去修改你自己代码</p><p>git status查看状态</p><p>git add ./</p><p>git commit -m “add sth”</p><p>3.切换到主分支，继续拉取网上最新代码</p><p>git checkout master<br>git pull upstream master</p><p>4.切换到分支，进行测试，<br>git checkout feature/add_sth</p><p>5.合并分支<br>git rebase master</p><p>git push origin feature/add_sth</p><p><img src="/2018/09/06/20180906git笔记/images/20180906git笔记/20180906030018530.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化一个Git仓库&quot;&gt;&lt;a href=&quot;#初始化一个Git仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化一个Git仓库&quot;&gt;&lt;/a&gt;初始化一个Git仓库&lt;/h2&gt;&lt;p&gt;使用git init命令。&lt;/p&gt;
&lt;h2 id=&quot;添加文件到Git仓库&quot;&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://enfangzhong.github.io/categories/Git/"/>
    
      <category term="Git仓库" scheme="http://enfangzhong.github.io/categories/Git/Git%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="Git" scheme="http://enfangzhong.github.io/tags/Git/"/>
    
      <category term="GiT撤销" scheme="http://enfangzhong.github.io/tags/GiT%E6%92%A4%E9%94%80/"/>
    
  </entry>
  
  <entry>
    <title>20180906-Git笔记</title>
    <link href="http://enfangzhong.github.io/2018/09/06/20180906111628/"/>
    <id>http://enfangzhong.github.io/2018/09/06/20180906111628/</id>
    <published>2018-09-06T03:16:28.000Z</published>
    <updated>2019-04-26T22:46:49.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h2><p>使用git init命令。</p><h2 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h2><p>分两步：</p><ul><li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></li><li>使用命令git commit -m <message>，完成。</message></li></ul><h2 id="查看git仓库状态"><a href="#查看git仓库状态" class="headerlink" title="查看git仓库状态"></a>查看git仓库状态</h2><p>要随时掌握工作区的状态，使用git status命令。</p><p>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p><ul><li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>如：git reset –hard HEAD^</p></li><li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。<br>如：git reset –hard commit_id</p></li></ul><p>git diff HEAD – readme.txt：<br>查看工作区和版本库里面最新版本的区别</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>git checkout – readme.txt<br>把readme.txt文件在工作区的修改全部撤销</p><ul><li><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ul><p>就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态</p><p>git reset HEAD <file><br>可以把暂存区的修改撤销掉（unstage），重新放回工作区</file></p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</file></li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li></ul><p>git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。<br>git rm –cached <file>…</file></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建SSH Key：<br>$ ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“<br>github添加SHH</p><p>本地仓库进行远程同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>第一次push加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来</p><p>以后只要本地作了提交，就可以通过命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>远程仓库tips:</p><ul><li><p>要关联一个远程库，使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git；</span><br></pre></td></tr></table></figure></li><li><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p></li></ul><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h2 id="分支管理（重要）"><a href="#分支管理（重要）" class="headerlink" title="分支管理（重要）"></a>分支管理（重要）</h2><p>master指向最新的提交<br>HEAD指向的就是当前分支</p><p>只有master分支的时候：<br>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="/20180906111628/20180906012830969.png" alt=""></p><p>从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变<br><img src="/20180906111628/20180906013006354.png" alt=""><br>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：<br><img src="/20180906111628/20180906013104230.png" alt=""><br>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：<br><img src="/20180906111628/20180906013153959.png" alt=""></p><p>下面开始实战。<br>首先，我们创建dev分支，然后切换到dev分支：<br>git checkout -b dev</p><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></p><p>git branch命令查看当前分支</p><p>把dev分支的工作成果合并到master分支上:<br>git merge dev</p><p>合并后删除分支：<br>git branch -d dev</p><p>总结：<br>Git鼓励大量使用分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure></p><p>本地库上使用命令git remote add把它和码云的远程库关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure></p><p>git remote -v查看远程库信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure></p><p>删除已关联的名为origin的远程库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><p>关联GitHub的远程库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure></p><p>关联码云的远程库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到GitHub，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure></p><p>如果要推送到码云，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure></p><h2 id="为开源项目贡献代码"><a href="#为开源项目贡献代码" class="headerlink" title="为开源项目贡献代码"></a>为开源项目贡献代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:enfangzhong/bootstrap.git</span><br></pre></td></tr></table></figure><p>添加推特公司bootstrap项目远程仓库<br>git remote add upstream <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:twbs/bootstrap.git</p><p>查看建立连接的远程仓库<br><img src="/20180906git笔记/20180906023141140.png" alt=""></p><p>1、首先拉取推特公司最新代码<br>git pull upstream master</p><p>2、自己创建分支<br>git checkout -b feature/add_sth</p><p>然后去修改你自己代码</p><p>git status查看状态</p><p>git add ./</p><p>git commit -m “add sth”</p><p>3.切换到主分支，继续拉取网上最新代码</p><p>git checkout master<br>git pull upstream master</p><p>4.切换到分支，进行测试，<br>git checkout feature/add_sth</p><p>5.合并分支<br>git rebase master</p><p>git push origin feature/add_sth</p><p><img src="/2018/09/06/20180906111628/images/20180906git笔记/20180906030018530.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化一个Git仓库&quot;&gt;&lt;a href=&quot;#初始化一个Git仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化一个Git仓库&quot;&gt;&lt;/a&gt;初始化一个Git仓库&lt;/h2&gt;&lt;p&gt;使用git init命令。&lt;/p&gt;
&lt;h2 id=&quot;添加文件到Git仓库&quot;&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://enfangzhong.github.io/categories/Git/"/>
    
      <category term="Git仓库" scheme="http://enfangzhong.github.io/categories/Git/Git%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="Git" scheme="http://enfangzhong.github.io/tags/Git/"/>
    
      <category term="GiT撤销" scheme="http://enfangzhong.github.io/tags/GiT%E6%92%A4%E9%94%80/"/>
    
  </entry>
  
  <entry>
    <title>JaveEE请求转发和重定向的区别</title>
    <link href="http://enfangzhong.github.io/2018/09/05/JaveEE%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://enfangzhong.github.io/2018/09/05/JaveEE请求转发和重定向的区别/</id>
    <published>2018-09-05T06:32:29.000Z</published>
    <updated>2018-09-06T13:21:29.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、请求转发和重定向"><a href="#一、请求转发和重定向" class="headerlink" title="一、请求转发和重定向"></a>一、请求转发和重定向</h2><h3 id="请求转发："><a href="#请求转发：" class="headerlink" title="请求转发："></a>请求转发：</h3><p>request.getRequestDispatcher(URL地址).forward(request, response)</p><p>处理流程：</p><ul><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用forword()方法，服务器Servlet把目标资源返回给客户端浏览器。<br><img src="https://i.loli.net/2018/09/06/5b9128febacfe.png" alt=""></li></ul><h3 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h3><p>response.sendRedirect(URL地址)</p><p>处理流程：</p><ul><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用response.sendReadirect()方法，把要访问的目标资源作为response响应头信息发给客户端浏览器。</li><li>客户端浏览器重新访问服务器资源xxx.jsp，服务器再次对客户端浏览器做出响应。<br><img src="https://i.loli.net/2018/09/06/5b9129b0968aa.png" alt=""><br>重定向<br>以上两种情况，你都需要考虑Servlet处理完后，数据如何在jsp页面上呈现。图例是请求、响应的流程，没有标明数据如何处理、展现。</li></ul><h2 id="二、转发和重定向的路径问题"><a href="#二、转发和重定向的路径问题" class="headerlink" title="二、转发和重定向的路径问题"></a>二、转发和重定向的路径问题</h2><p>1）使用相对路径在重定向和转发中没有区别<br>2）重定向和请求转发使用绝对路径时，根/路径代表了不同含义<br>重定向response.sendRedirect(“xxx”)是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。/指的Tomcat的根目录,写绝对路径应该写成”/当前Web程序根名称/资源名” 。如”/WebModule/login.jsp”,”/bbs/servlet/LoginServlet”<br>转发是在服务器内部进行的，写绝对路径/开头指的是当前的Web应用程序。绝对路径写法就是是”/login.jsp”或”/servlet/LoginServlet”。</p><p><strong>总结：</strong>以上要注意是区分是从服务器外的请求，还在是内部转发，从服务器外的请求，从Tomcat根写起(就是要包括当前Web的根)；是服务器内部的转发，很简单了，因为在当前服务器内，/写起指的就是当前Web的根目录。</p><h2 id="三、转发和重定向的区别"><a href="#三、转发和重定向的区别" class="headerlink" title="三、转发和重定向的区别"></a>三、转发和重定向的区别</h2><ul><li><p>request.getRequestDispatcher()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；服务器内部转发，整个过程处于同一个请求当中。<br>response.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。不在同一个请求。重定向，实际上客户端会向服务器端发送两个请求。<br>所以转发中数据的存取可以用request作用域：request.setAttribute(), request.getAttribute()，重定向是取不到request中的数据的。只能用session。</p></li><li><p>forward()更加高效，在可以满足需要时，尽量使用RequestDispatcher.forward()方法。（思考一下为什么？）</p></li><li><p>RequestDispatcher是通过调用HttpServletRequest对象的getRequestDispatcher()方法得到的，是属于请求对象的方法。<br>sendRedirect()是HttpServletResponse对象的方法，即响应对象的方法，既然调用了响应对象的方法，那就表明整个请求过程已经结束了，服务器开始向客户端返回执行的结果。</p></li><li><p>重定向可以跨域访问，而转发是在web服务器内部进行的，不能跨域访问。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、请求转发和重定向&quot;&gt;&lt;a href=&quot;#一、请求转发和重定向&quot; class=&quot;headerlink&quot; title=&quot;一、请求转发和重定向&quot;&gt;&lt;/a&gt;一、请求转发和重定向&lt;/h2&gt;&lt;h3 id=&quot;请求转发：&quot;&gt;&lt;a href=&quot;#请求转发：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="JaveEE" scheme="http://enfangzhong.github.io/categories/JaveEE/"/>
    
      <category term="java编程" scheme="http://enfangzhong.github.io/categories/JaveEE/java%E7%BC%96%E7%A8%8B/"/>
    
      <category term="请求转发" scheme="http://enfangzhong.github.io/categories/JaveEE/java%E7%BC%96%E7%A8%8B/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/"/>
    
      <category term="重定向" scheme="http://enfangzhong.github.io/categories/JaveEE/java%E7%BC%96%E7%A8%8B/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
    
      <category term="JaveEE" scheme="http://enfangzhong.github.io/tags/JaveEE/"/>
    
      <category term="java框架" scheme="http://enfangzhong.github.io/tags/java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="java编程" scheme="http://enfangzhong.github.io/tags/java%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://enfangzhong.github.io/2018/09/05/Redis%20not%20only%20sql/"/>
    <id>http://enfangzhong.github.io/2018/09/05/Redis not only sql/</id>
    <published>2018-09-05T02:32:35.000Z</published>
    <updated>2019-04-26T22:57:03.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><h3 id="关于关系型数据库和nosql数据库"><a href="#关于关系型数据库和nosql数据库" class="headerlink" title="关于关系型数据库和nosql数据库"></a>关于关系型数据库和nosql数据库</h3><blockquote><p>  关系型数据库是基于关系表的数据库，最终会将数据持久化到磁盘上，而nosql数据<br>  库是基于特殊的结构，并将数据存储到内存的数据库。从性能上而言，nosql数据库<br>  要优于关系型数据库，从安全性上而言关系型数据库要优于nosql数据库，所以在实<br>  际开发中一个项目中nosql和关系型数据库会一起使用，达到性能和安全性的双保证。</p></blockquote><h3 id="为什么要使用Redis"><a href="#为什么要使用Redis" class="headerlink" title="为什么要使用Redis"></a>为什么要使用Redis</h3><h3 id="redis在Linux上的安装"><a href="#redis在Linux上的安装" class="headerlink" title="redis在Linux上的安装"></a>redis在Linux上的安装</h3><ol><li><p>安装redis编译的c环境，yum install gcc-c++</p></li><li><p>将redis-2.6.16.tar.gz上传到Linux系统中</p></li><li><p>解压到/usr/local下 tar -xvf redis-2.6.16.tar.gz -C /usr/local</p></li><li><p>进入redis-2.6.16目录 使用make命令编译redis</p></li><li><p>在redis-2.6.16目录中 使用make PREFIX=/usr/local/redis install命令安装<br>redis到/usr/local/redis中</p></li><li><p>拷贝redis-2.6.16中的redis.conf到安装目录redis中</p></li><li><p>启动redis 在bin下执行命令redis-server redis.conf</p></li><li><p>如需远程连接redis，需配置redis端口6379在linux防火墙中开发</p></li></ol><blockquote><p>  /sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT</p></blockquote><blockquote><p>  /etc/rc.d/init.d/iptables save</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/../images/20180905redis/37168456521de2f12b6616af58929fc4.png" alt=""></p><p>启动后看到如上欢迎页面，但此窗口不能关闭，窗口关闭就认为redis也关闭了(类<br>似Tomcat通过bin下的startup.bat的方式)</p><p>解决方案：可以通过修改配置文件 配置redis后台启动，即服务器启动了但不会<br>穿件控制台窗口</p><p>将redis.conf文件中的daemonize从false修改成true表示后台启动</p><p>使用命令查看6379端口是否启动ps -ef | grep redis</p><p><img src="/2018/09/05/Redis not only sql/images/../images/20180905redis/c7bdc26e311ca4aad1c8f0dbbde470cf.png" alt=""></p><h1 id="使用java去操作Redis"><a href="#使用java去操作Redis" class="headerlink" title="使用java去操作Redis"></a>使用java去操作Redis</h1><h1 id="Redis的常用命令"><a href="#Redis的常用命令" class="headerlink" title="Redis的常用命令"></a>Redis的常用命令</h1><blockquote><p>  redis是一种高级的key-value的存储系统</p></blockquote><blockquote><p>  其中的key是字符串类型，尽可能满足如下几点：</p></blockquote><ol><li><p>key不要太长，最好不要操作1024个字节，这不仅会消耗内存还会降低查找 效率</p></li><li><p>key不要太短，如果太短会降低key的可读性</p></li><li><p>在项目中，key最好有一个统一的命名规范（根据企业的需求）</p></li></ol><blockquote><p>  其中value 支持五种数据类型：</p></blockquote><ol><li><p>字符串型 string</p></li><li><p>字符串列表 lists</p></li><li><p>字符串集合 sets</p></li><li><p>有序字符串集合 sorted sets</p></li><li><p>哈希类型 hashs</p></li></ol><blockquote><p>  我们对Redis的学习，主要是对数据的存储，下面将来学习各种Redis的数据类型的<br>  存储操作：</p></blockquote><h3 id="存储字符串string"><a href="#存储字符串string" class="headerlink" title="存储字符串string"></a>存储字符串string</h3><blockquote><p>  字符串类型是Redis中最为基础的数据存储类型，它在Redis中是二进制安全的，这<br>  便意味着该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等。<br>  在Redis中字符串类型的Value最多可以容纳的数据长度是512M</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/d719e7ea50fbb0ddd14a95366cb28382.png" alt=""></p><ol><li><p><strong>set key value</strong>：设定key持有指定的字符串value，如果该key存在则进行覆盖<br>操作。总是返回”OK”</p></li><li><p><strong>get key</strong>：获取key的value。如果与该key关联的value不是String类型，redis<br>将返回错误信息，因为get命令只能用于获取String value；如果该key不存在，返<br>回null。</p></li></ol><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/122f9d8b0eb285eb9b9adcce1830fb55.png" alt=""></p><ol><li><strong>getset key value</strong>：先获取该key的值，然后在设置该key的值。</li></ol><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/f235bea179383cbf7acba3331c2539bc.png" alt=""></p><blockquote><p>  4）<strong>incr key</strong>：将指定的key的value原子性的递增1.如果该key不存在，其初始值<br>  为0，在incr之后其值为1。如果value的值不能转成整型，如hello，该操作将执<br>  行失败并返回相应的错误信息。</p></blockquote><blockquote><p>  5）<strong>decr key</strong>：将指定的key的value原子性的递减1.如果该key不存在，其初始值<br>  为0，在incr之后其值为-1。如果value的值不能转成整型，如hello，该操作将执<br>  行失败并返回相应的错误信息。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/550c428204f4d04aa54544d301edf00d.png" alt=""></p><blockquote><p>  6）<strong>incrby key increment</strong>：将指定的key的value原子性增加increment，如果该<br>  key不存在，器初始值为0，在incrby之后，该值为increment。如果该值不能转成<br>  整型，如hello则失败并返回错误信息</p></blockquote><blockquote><p>  7）<strong>decrby key decrement</strong>：将指定的key的value原子性减少decrement，如果<br>  该key不存在，器初始值为0，在decrby之后，该值为decrement。如果该值不能<br>  转成整型，如hello则失败并返回错误信息</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/09a5661b72a8d30fe1aaa56947a0ba24.png" alt=""></p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/ad6001d7f725828dd13223f512d98ea4.png" alt=""></p><blockquote><p>  8）<strong>append key value</strong>：如果该key存在，则在原有的value后追加该值；如果该<br>  key 不存在，则重新创建一个key/value</p></blockquote><h3 id="存储lists类型"><a href="#存储lists类型" class="headerlink" title="存储lists类型"></a>存储lists类型</h3><blockquote><p>  在Redis中，List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表<br>  一样，我们可以在其头部(left)和尾部(right)添加新的元素。在插入时，如果该键并不<br>  存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移<br>  除，那么该键也将会被从数据库中删除。List中可以包含的最大元素数量是<br>  4294967295。</p></blockquote><p>从元素插入和删除的效率视角来看，如果我们是在链表的两头插入或删除元素，这将<br>会是非常高效的操作，即使链表中已经存储了百万条记录，该操作也可以在常量时间<br>内完成。然而需要说明的是，如果元素插入或删除操作是作用于链表中间，那将会是<br>非常低效的。相信对于有良好数据结构基础的开发者而言，这一点并不难理解。</p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/a95668510b8f0b7d098dc493b9a06fd0.png" alt=""></p><ol><li><p><strong>lpush key value1 value2…</strong>：在指定的key所关联的list的头部插入所有的<br>values，如果该key不存在，该命令在插入的之前创建一个与该key关联的空链<br>表，之后再向该链表的头部插入数据。插入成功，返回元素的个数。</p></li><li><p><strong>rpush key value1、value2…</strong>：在该list的尾部添加元素</p></li><li><p><strong>lrange key start end</strong>：获取链表中从start到end的元素的值，start、end可<br>为负数，若为-1则表示链表尾部的元素，-2则表示倒数第二个，依次类推…</p></li></ol><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/c817bb72ebb9a912fc98728fd2555703.png" alt=""></p><ol><li><strong>lpushx key value</strong>：仅当参数中指定的key存在时（如果与key管理的list中没<br>有值时，则该key是不存在的）在指定的key所关联的list的头部插入value。</li></ol><blockquote><p>  5）<strong>rpushx key value</strong>：在该list的尾部添加元素</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/f4168cd95ab247bffb96c7f4e53ca49c.png" alt=""></p><blockquote><p>  6）<strong>lpop key</strong>：返回并弹出指定的key关联的链表中的第一个元素，即头部元素。</p></blockquote><blockquote><p>  7）<strong>rpop key</strong>：从尾部弹出元素。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/55bf55e5817df95473e372562a0c6f6d.png" alt=""></p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/8ed2b9e5d38588b65001722cba9e596f.png" alt=""></p><blockquote><p>  8）<strong>rpoplpush resource destination</strong>：将链表中的尾部元素弹出并添加到头部</p></blockquote><blockquote><p>  9）<strong>llen key</strong>：返回指定的key关联的链表中的元素的数量。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/d828c877fc1d70d29c2e2874af7d3fb7.png" alt=""></p><blockquote><p>  10）<strong>lset key index<br>  value</strong>：设置链表中的index的脚标的元素值，0代表链表的头元<br>  素，-1代表链表的尾元素。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/e12c33b42ab106d631e248ee90c0bb05.png" alt=""></p><blockquote><p>  11）<strong>lrem key count<br>  value</strong>：删除count个值为value的元素，如果count大于0，从头向尾遍历并删除count个值为value的元素，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/3bdb15c54c9a766fb7a9607efea446b3.png" alt=""></p><blockquote><p>  12）<strong>linsert key before|after pivot<br>  value</strong>：在pivot元素前或者后插入value这个 元素。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/d3fbb6c9ed79291ca94214f2a67d00ff.png" alt=""></p><h3 id="存储sets类型"><a href="#存储sets类型" class="headerlink" title="存储sets类型"></a>存储sets类型</h3><blockquote><p>  在Redis中，我们可以将Set类型看作为没有排序的字符集合，和List类型一样，我<br>  们也可以在该类型的数据值上执行添加、删除或判断某一元素是否存在等操作。需要<br>  说明的是，这些操作的时间是常量时间。Set可包含的最大元素数是4294967295。</p></blockquote><blockquote><p>  和List类型不同的是，Set集合中不允许出现重复的元素。和List类型相比，Set类<br>  型在功能上还存在着一个非常重要的特性，即在服务器端完成多个Sets之间的聚合计<br>  算操作，如unions、intersections和differences。由于这些操作均在服务端完成，<br>  因此效率极高，而且也节省了大量的网络IO开销</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/a95668510b8f0b7d098dc493b9a06fd0.png" alt=""></p><blockquote><p>  1）sadd key value1、value2…：向set中添加数据，如果该key的值已有则不会<br>  重复添加</p></blockquote><blockquote><p>  2）smembers key：获取set中所有的成员</p></blockquote><blockquote><p>  3）scard key：获取set中成员的数量</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/a41c3bb595584719ad1f9a1f02ff08cd.png" alt=""></p><blockquote><p>  4）sismember key member：判断参数中指定的成员是否在该set中，1表示存<br>  在，0表示不存在或者该key本身就不存在</p></blockquote><blockquote><p>  5）srem key member1、member2…：删除set中指定的成员</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/1701297c2cd81dc7d0bda3721f10a301.png" alt=""></p><p>6）srandmember key：随机返回set中的一个成员</p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/0b16524ef5e1db1fa4dba8226512454b.png" alt=""></p><blockquote><p>  7）sdiff sdiff key1 key2：返回key1与key2中相差的成员，而且与key的顺序有<br>  关。即返回差集。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/ffa48e0a498de079ab56848dda375900.png" alt=""></p><blockquote><p>  8）sdiffstore destination key1 key2：将key1、key2相差的成员存储在<br>  destination上</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/b600dad7d4568d70d774422aef6d32d1.png" alt=""></p><blockquote><p>  9）sinter key[key1,key2…]：返回交集。</p></blockquote><blockquote><p>  10）sinterstore destination key1 key2：将返回的交集存储在destination上</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/9a48658e5c6f7fe08177669386a8e7f1.png" alt=""></p><blockquote><p>  11）sunion key1、key2：返回并集。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/8847e09f463cee91443b06034ad63748.png" alt=""></p><blockquote><p>  12）sunionstore destination key1 key2：将返回的并集存储在destination上</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/994d5312aeb7e2fab285748c1ed4dab6.png" alt=""></p><h3 id="存储sortedset"><a href="#存储sortedset" class="headerlink" title="存储sortedset"></a>存储sortedset</h3><blockquote><p>  Sorted-Sets和Sets类型极为相似，它们都是字符串的集合，都不允许重复的成员出<br>  现在一个Set中。它们之间的主要差别是Sorted-Sets中的每一个成员都会有一个分<br>  数(score)与之关联，Redis正是通过分数来为集合中的成员进行从小到大的排序。然<br>  而需要额外指出的是，尽管Sorted-Sets中的成员必须是唯一的，但是分数(score)<br>  却是可以重复的。</p></blockquote><blockquote><p>  在Sorted-Set中添加、删除或更新一个成员都是非常快速的操作，其时间复杂度为<br>  集合中成员数量的对数。由于Sorted-Sets中的成员在集合中的位置是有序的，因此，<br>  即便是访问位于集合中部的成员也仍然是非常高效的。事实上，Redis所具有的这一<br>  特征在很多其它类型的数据库中是很难实现的，换句话说，在该点上要想达到和Redis<br>  同样的高效，在其它数据库中进行建模是非常困难的。</p></blockquote><blockquote><p>  例如：游戏排名、微博热点话题等使用场景。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/a95668510b8f0b7d098dc493b9a06fd0.png" alt=""></p><blockquote><p>  1）<strong>zadd key score member score2 member2 …</strong> ：将所有成员以及该成员的<br>  分数存放到sorted-set中</p></blockquote><blockquote><p>  2）<strong>zcard key</strong>：获取集合中的成员数量</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/a9531d6a0b55abcb785b42e3e226a429.png" alt=""></p><blockquote><p>  3）<strong>zcount key min max</strong>：获取分数在[min,max]之间的成员</p></blockquote><blockquote><p>  zincrby key increment member：设置指定成员的增加的分数。</p></blockquote><blockquote><p>  zrange key start end<br>  [withscores]：获取集合中脚标为start-end的成员，[withscores]参数表明返回的成员包含其分数。</p></blockquote><blockquote><p>  zrangebyscore key min max [withscores] [limit offset<br>  count]：返回分数在[min,max]的成员并按照分数从低到高排序。[withscores]：显示分数；[limit<br>  offset count]：offset，表明从脚标为offset的元素开始并返回count个成员。</p></blockquote><blockquote><p>  zrank key member：返回成员在集合中的位置。</p></blockquote><blockquote><p>  zrem key member[member…]：移除集合中指定的成员，可以指定多个成员。</p></blockquote><blockquote><p>  zscore key member：返回指定成员的分数</p></blockquote><h3 id="存储hash"><a href="#存储hash" class="headerlink" title="存储hash"></a>存储hash</h3><blockquote><p>  Redis中的Hashes类型可以看成具有String Key和String Value的map容器。所<br>  以该类型非常适合于存储值对象的信息。如Username、Password和Age等。如果<br>  Hash中包含很少的字段，那么该类型的数据也将仅占用很少的磁盘空间。每一个Hash<br>  可以存储4294967295个键值对。</p></blockquote><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/e8320268e156af3a42887d284af00fb1.png" alt=""></p><p></p><p>1）<strong>hset key field value</strong>：为指定的key设定field/value对（键值对）。</p><p>2）<strong>hgetall key：</strong>获取key中的所有filed-vaule</p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/be52e27b0b7cb4e15cf9e125a268316f.png" alt=""></p><p>3）<strong>hget key field</strong>：返回指定的key中的field的值</p><p><img src="/2018/09/05/Redis not only sql/images/20180905redis/347c176b3e916155debc4cd8494d9e42.png" alt=""></p><p>4）<strong>hmset key fields</strong>：设置key中的多个filed/value</p><p>5）<strong>hmget key fileds</strong>：获取key中的多个filed的值</p><p>6）<strong>hexists key field</strong>：判断指定的key中的filed是否存在</p><p>7）<strong>hlen key</strong>：获取key所包含的field的数量</p><p>8）<strong>hincrby key field increment</strong>：设置key中filed的值增加increment，如：age<br>增加20</p><h1 id="Redis的通用操作-见文档"><a href="#Redis的通用操作-见文档" class="headerlink" title="Redis的通用操作(见文档)"></a>Redis的通用操作(见文档)</h1><h1 id="Redis的特性-见文档"><a href="#Redis的特性-见文档" class="headerlink" title="Redis的特性(见文档)"></a>Redis的特性(见文档)</h1><h1 id="Redis的事务-见文档"><a href="#Redis的事务-见文档" class="headerlink" title="Redis的事务(见文档)"></a>Redis的事务(见文档)</h1><h1 id="Redis的持久化-见文档"><a href="#Redis的持久化-见文档" class="headerlink" title="Redis的持久化(见文档)"></a>Redis的持久化(见文档)</h1><p>总结：</p><ol><li><p>nosql</p></li><li><p>redis安装—-linux（重点）</p></li><li><p>jedis（重点）</p></li><li><p>redis的数据操作类型 5中 (了解) — string和hash</p></li><li><p>redis的其他</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=&quot;Redis简介&quot;&gt;&lt;/a&gt;Redis简介&lt;/h1&gt;&lt;h3 id=&quot;关于关系型数据库和nosql数据库&quot;&gt;&lt;a href=&quot;#关于关系型数据库和nosql数据
      
    
    </summary>
    
      <category term="Redis" scheme="http://enfangzhong.github.io/categories/Redis/"/>
    
      <category term="非关系型数据库" scheme="http://enfangzhong.github.io/categories/Redis/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis" scheme="http://enfangzhong.github.io/tags/Redis/"/>
    
      <category term="非关系型数据库" scheme="http://enfangzhong.github.io/tags/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://enfangzhong.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统SSH出现encountered 1 errors错误怎么办？</title>
    <link href="http://enfangzhong.github.io/2018/09/03/Linux%E7%B3%BB%E7%BB%9FSSH%E5%87%BA%E7%8E%B0encountered%201%20errors%E9%94%99%E8%AF%AF%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <id>http://enfangzhong.github.io/2018/09/03/Linux系统SSH出现encountered 1 errors错误怎么办？/</id>
    <published>2018-09-03T07:03:11.000Z</published>
    <updated>2018-09-03T06:59:33.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统SSH出现encountered-1-errors错误怎么办"><a href="#Linux系统SSH出现encountered-1-errors错误怎么办" class="headerlink" title="Linux系统SSH出现encountered 1 errors错误怎么办"></a>Linux系统SSH出现encountered 1 errors错误怎么办</h1><p>一些Linux用户在使用SSH服务器时，发现自己的SSH服务器出现了encountered 1 errors during the transfer，这个问题该怎么解决呢?现在就让小编来教你解决的方法吧。</p><p><strong>解决方法：</strong>(以下方法简单排序，从简单到复杂)</p><p>　　法一：在SSH Secure File Transfer(上传文件那个)，打开“Operation”菜单，打开“File Transfer Mode”子菜单，再选择“Binary”，OK!</p><p>　　法二：把服务器上同名文件删掉再传</p><p>　　法三：如果文件在桌面上，将要上传的文件复制到其它分区，再上传!(我是这种方式解决的)</p><p>　　这就是解决Linux系统SSH服务器出现encountered 1 errors during the transfer问题的方法了，有需要的用户快来试试这些方法吧。</p><p> <strong>欢迎访问我的博客</strong><br><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux系统SSH出现encountered-1-errors错误怎么办&quot;&gt;&lt;a href=&quot;#Linux系统SSH出现encountered-1-errors错误怎么办&quot; class=&quot;headerlink&quot; title=&quot;Linux系统SSH出现encoun
      
    
    </summary>
    
      <category term="Linux" scheme="http://enfangzhong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://enfangzhong.github.io/tags/Linux/"/>
    
      <category term="SSH" scheme="http://enfangzhong.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Java开发中的23种设计模式详解</title>
    <link href="http://enfangzhong.github.io/2018/09/03/Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://enfangzhong.github.io/2018/09/03/Java开发中的23种设计模式详解/</id>
    <published>2018-09-03T04:58:00.000Z</published>
    <updated>2018-09-03T05:31:53.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java开发中的23种设计模式详解"><a href="#Java开发中的23种设计模式详解" class="headerlink" title="Java开发中的23种设计模式详解"></a>Java开发中的23种设计模式详解</h1><h2 id="java的设计模式大体上分为三大类："><a href="#java的设计模式大体上分为三大类：" class="headerlink" title="java的设计模式大体上分为三大类："></a>java的设计模式大体上分为三大类：</h2><ul><li>创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</li><li>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</li><li>行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><h2 id="设计模式遵循的原则有6个："><a href="#设计模式遵循的原则有6个：" class="headerlink" title="设计模式遵循的原则有6个："></a>设计模式遵循的原则有6个：</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><p>　　<strong>对扩展开放，对修改关闭</strong>。</p><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><p>　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><p>　　这个是开闭原则的基础，<strong>对接口编程</strong>，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>　　使用多个隔离的借口来降低耦合度。</p><p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p><p>　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><p>　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p><h2 id="1-工厂模式（Factory-Method）"><a href="#1-工厂模式（Factory-Method）" class="headerlink" title="1. 工厂模式（Factory Method）"></a>1. 工厂模式（Factory Method）</h2><p>　　常用的工厂模式是静态工厂，利用static方法，作为一种类似于常见的工具类Utils等辅助效果，一般情况下工厂类不需要实例化。</p><p>　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">interface food&#123;&#125;</span><br><span class="line"></span><br><span class="line">class A implements food&#123;&#125;</span><br><span class="line">class B implements food&#123;&#125;</span><br><span class="line">class C implements food&#123;&#125;</span><br><span class="line"></span><br><span class="line">public class StaticFactory &#123;</span><br><span class="line"></span><br><span class="line">    private StaticFactory()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static food getA()&#123;  return new A(); &#125;</span><br><span class="line">    public static food getB()&#123;  return new B(); &#125;</span><br><span class="line">    public static food getC()&#123;  return new C(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Client&#123;</span><br><span class="line">    //客户端代码只需要将相应的参数传入即可得到对象</span><br><span class="line">    //用户不需要了解工厂类内部的逻辑。</span><br><span class="line">    public void get(String name)&#123;</span><br><span class="line">        food x = null ;</span><br><span class="line">        if ( name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            x = StaticFactory.getA();</span><br><span class="line">        &#125;else if ( name.equals(&quot;B&quot;))&#123;</span><br><span class="line">            x = StaticFactory.getB();</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            x = StaticFactory.getC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-抽象工厂模式（Abstract-Factory）"><a href="#2-抽象工厂模式（Abstract-Factory）" class="headerlink" title="2. 抽象工厂模式（Abstract Factory）"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>　　一个基础接口定义了功能，每个实现接口的子类就是产品，然后定义一个工厂接口，实现了工厂接口的就是工厂，这时候，接口编程的优点就出现了，我们可以新增产品类（只需要实现产品接口），只需要同时新增一个工厂类，客户端就可以轻松调用新产品的代码。</p><p>　　抽象工厂的灵活性就体现在这里，无需改动原有的代码，毕竟对于客户端来说，静态工厂模式在不改动StaticFactory类的代码时无法新增产品，如果采用了抽象工厂模式，就可以轻松的新增拓展类。</p><p>　　实例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">interface food&#123;&#125;</span><br><span class="line"></span><br><span class="line">class A implements food&#123;&#125;</span><br><span class="line">class B implements food&#123;&#125;</span><br><span class="line"></span><br><span class="line">interface produce&#123; food get();&#125;</span><br><span class="line"></span><br><span class="line">class FactoryForA implements produce&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public food get() &#123;</span><br><span class="line">        return new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class FactoryForB implements produce&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public food get() &#123;</span><br><span class="line">        return new B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AbstractFactory &#123;</span><br><span class="line">    public void ClientCode(String name)&#123;</span><br><span class="line">        food x= new FactoryForA().get();</span><br><span class="line">        x = new FactoryForB().get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-单例模式（Singleton）"><a href="#3-单例模式（Singleton）" class="headerlink" title="3. 单例模式（Singleton）"></a>3. 单例模式（Singleton）</h2><p> 　　在内部创建一个实例，构造器全部设置为private，所有方法均在该实例上改动，在创建上要注意类的实例化只能执行一次，可以采用许多种方法来实现，如Synchronized关键字，或者利用内部类等机制来实现。</p><p>　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    private static class SingletonBuild&#123;</span><br><span class="line">        private static Singleton value = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Singleton getInstance()&#123;  return  SingletonBuild.value ;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-建造者模式（Builder）"><a href="#4-建造者模式（Builder）" class="headerlink" title="4.建造者模式（Builder）"></a>4.建造者模式（Builder）</h2><p>　　在了解之前，先假设有一个问题，我们需要创建一个学生对象，属性有name,number,class,sex,age,school等属性，如果每一个属性都可以为空，也就是说我们可以只用一个name,也可以用一个school,name,或者一个class,number，或者其他任意的赋值来创建一个学生对象，这时该怎么构造？</p><p>　　难道我们写6个1个输入的构造函数，15个2个输入的构造函数…….吗？这个时候就需要用到Builder模式了。给个例子，大家肯定一看就懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class Builder &#123;</span><br><span class="line"></span><br><span class="line">    static class Student&#123;</span><br><span class="line">        String name = null ;</span><br><span class="line">        int number = -1 ;</span><br><span class="line">        String sex = null ;</span><br><span class="line">        int age = -1 ;</span><br><span class="line">        String school = null ;</span><br><span class="line"></span><br><span class="line">　　　　　//构建器，利用构建器作为参数来构建Student对象</span><br><span class="line">        static class StudentBuilder&#123;</span><br><span class="line">            String name = null ;</span><br><span class="line">            int number = -1 ;</span><br><span class="line">            String sex = null ;</span><br><span class="line">            int age = -1 ;</span><br><span class="line">            String school = null ;</span><br><span class="line">            public StudentBuilder setName(String name) &#123;</span><br><span class="line">                this.name = name;</span><br><span class="line">                return  this ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public StudentBuilder setNumber(int number) &#123;</span><br><span class="line">                this.number = number;</span><br><span class="line">                return  this ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public StudentBuilder setSex(String sex) &#123;</span><br><span class="line">                this.sex = sex;</span><br><span class="line">                return  this ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public StudentBuilder setAge(int age) &#123;</span><br><span class="line">                this.age = age;</span><br><span class="line">                return  this ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public StudentBuilder setSchool(String school) &#123;</span><br><span class="line">                this.school = school;</span><br><span class="line">                return  this ;</span><br><span class="line">            &#125;</span><br><span class="line">            public Student build() &#123;</span><br><span class="line">                return new Student(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Student(StudentBuilder builder)&#123;</span><br><span class="line">            this.age = builder.age;</span><br><span class="line">            this.name = builder.name;</span><br><span class="line">            this.number = builder.number;</span><br><span class="line">            this.school = builder.school ;</span><br><span class="line">            this.sex = builder.sex ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">        Student a = new Student.StudentBuilder().setAge(13).setName(&quot;LiHua&quot;).build();</span><br><span class="line">        Student b = new Student.StudentBuilder().setSchool(&quot;sc&quot;).setSex(&quot;Male&quot;).setName(&quot;ZhangSan&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-原型模式（Protype）"><a href="#5-原型模式（Protype）" class="headerlink" title="5. 原型模式（Protype）"></a>5. 原型模式（Protype）</h2><p>原型模式就是讲一个对象作为原型，使用clone()方法来创建新的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Prototype implements Cloneable&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone()   &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return super.clone();</span><br><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main ( String[] args)&#123;</span><br><span class="line">        Prototype pro = new Prototype();</span><br><span class="line">        Prototype pro1 = (Prototype)pro.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处使用的是浅拷贝，关于深浅拷贝，大家可以另行查找相关资料。</p><h2 id="6-适配器模式（Adapter）"><a href="#6-适配器模式（Adapter）" class="headerlink" title="6.适配器模式（Adapter）"></a>6.适配器模式（Adapter）</h2><p>适配器模式的作用就是在原来的类上提供新功能。主要可分为3种：</p><p>类适配：创建新类，继承源类，并实现新接口，例如<br>class  adapter extends oldClass  implements newFunc{}<br>对象适配：创建新类持源类的实例，并实现新接口，例如<br>class adapter implements newFunc { private oldClass oldInstance ;}<br>接口适配：创建新的抽象类实现旧接口方法。例如<br>abstract class adapter implements oldClassFunc { void newFunc();}<br>7.装饰模式（Decorator）<br> 给一类对象增加新的功能，装饰方法与具体的内部逻辑无关。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Source&#123; void method();&#125;</span><br><span class="line">public class Decorator implements Source&#123;</span><br><span class="line"></span><br><span class="line">    private Source source ;</span><br><span class="line">    public void decotate1()&#123;</span><br><span class="line">        System.out.println(&quot;decorate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void method() &#123;</span><br><span class="line">        decotate1();</span><br><span class="line">        source.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-代理模式（Proxy）"><a href="#8-代理模式（Proxy）" class="headerlink" title="8.代理模式（Proxy）"></a>8.代理模式（Proxy）</h2><p>客户端通过代理类访问，代理类实现具体的实现细节，客户只需要使用代理类即可实现操作。</p><p>这种模式可以对旧功能进行代理，用一个代理类调用原有的方法，且对产生的结果进行控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface Source&#123; void method();&#125;</span><br><span class="line"></span><br><span class="line">class OldClass implements Source&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void method() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Proxy implements Source&#123;</span><br><span class="line">    private Source source = new OldClass();</span><br><span class="line"></span><br><span class="line">    void doSomething()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void method() &#123;</span><br><span class="line">        new Class1().Func1();</span><br><span class="line">        source.method();</span><br><span class="line">        new Class2().Func2();</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-外观模式（Facade）"><a href="#9-外观模式（Facade）" class="headerlink" title="9.外观模式（Facade）"></a>9.外观模式（Facade）</h2><p>为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。这句话是百度百科的解释，有点难懂，但是没事，看下面的例子，我们在启动停止所有子系统的时候，为它们设计一个外观类，这样就可以实现统一的接口，这样即使有新增的子系统subSystem4,也可以在不修改客户端代码的情况下轻松完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Facade &#123;</span><br><span class="line">    private subSystem1 subSystem1 = new subSystem1();</span><br><span class="line">    private subSystem2 subSystem2 = new subSystem2();</span><br><span class="line">    private subSystem3 subSystem3 = new subSystem3();</span><br><span class="line">    </span><br><span class="line">    public void startSystem()&#123;</span><br><span class="line">        subSystem1.start();</span><br><span class="line">        subSystem2.start();</span><br><span class="line">        subSystem3.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void stopSystem()&#123;</span><br><span class="line">        subSystem1.stop();</span><br><span class="line">        subSystem2.stop();</span><br><span class="line">        subSystem3.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-桥接模式（Bridge）"><a href="#10-桥接模式（Bridge）" class="headerlink" title="10.桥接模式（Bridge）"></a>10.桥接模式（Bridge）</h2><p>这里引用下<a href="http://www.runoob.com/design-pattern/bridge-pattern.html的例子。Circle类将DrwaApi与Shape类进行了桥接，代码：" target="_blank" rel="noopener">http://www.runoob.com/design-pattern/bridge-pattern.html的例子。Circle类将DrwaApi与Shape类进行了桥接，代码：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">interface DrawAPI &#123;</span><br><span class="line">    public void drawCircle(int radius, int x, int y);</span><br><span class="line">&#125;</span><br><span class="line">class RedCircle implements DrawAPI &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void drawCircle(int radius, int x, int y) &#123;</span><br><span class="line">        System.out.println(&quot;Drawing Circle[ color: red, radius: &quot;</span><br><span class="line">                + radius +&quot;, x: &quot; +x+&quot;, &quot;+ y +&quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GreenCircle implements DrawAPI &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void drawCircle(int radius, int x, int y) &#123;</span><br><span class="line">        System.out.println(&quot;Drawing Circle[ color: green, radius: &quot;</span><br><span class="line">                + radius +&quot;, x: &quot; +x+&quot;, &quot;+ y +&quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Shape &#123;</span><br><span class="line">    protected DrawAPI drawAPI;</span><br><span class="line">    protected Shape(DrawAPI drawAPI)&#123;</span><br><span class="line">        this.drawAPI = drawAPI;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Circle extends Shape &#123;</span><br><span class="line">    private int x, y, radius;</span><br><span class="line"></span><br><span class="line">    public Circle(int x, int y, int radius, DrawAPI drawAPI) &#123;</span><br><span class="line">        super(drawAPI);</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">        this.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        drawAPI.drawCircle(radius,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客户端使用代码</span><br><span class="line">Shape redCircle = new Circle(100,100, 10, new RedCircle());</span><br><span class="line">Shape greenCircle = new Circle(100,100, 10, new GreenCircle());</span><br><span class="line">redCircle.draw();</span><br><span class="line">greenCircle.draw();</span><br></pre></td></tr></table></figure><h2 id="11-组合模式（Composite）"><a href="#11-组合模式（Composite）" class="headerlink" title="11.组合模式（Composite）"></a>11.组合模式（Composite）</h2><p> 组合模式是为了表示那些层次结构，同时部分和整体也可能是一样的结构，常见的如文件夹或者树。举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">abstract class component&#123;&#125;</span><br><span class="line"></span><br><span class="line">class File extends  component&#123; String filename;&#125;</span><br><span class="line"></span><br><span class="line">class Folder extends  component&#123;</span><br><span class="line">    component[] files ;  //既可以放文件File类，也可以放文件夹Folder类。Folder类下又有子文件或子文件夹。</span><br><span class="line">    String foldername ;</span><br><span class="line">    public Folder(component[] source)&#123; files = source ;&#125;</span><br><span class="line">    </span><br><span class="line">    public void scan()&#123;</span><br><span class="line">        for ( component f:files)&#123;</span><br><span class="line">            if ( f instanceof File)&#123;</span><br><span class="line">                System.out.println(&quot;File &quot;+((File) f).filename);</span><br><span class="line">            &#125;else if(f instanceof Folder)&#123;</span><br><span class="line">                Folder e = (Folder)f ;</span><br><span class="line">                System.out.println(&quot;Folder &quot;+e.foldername);</span><br><span class="line">                e.scan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-享元模式（Flyweight）"><a href="#12-享元模式（Flyweight）" class="headerlink" title="12.享元模式（Flyweight）"></a>12.享元模式（Flyweight）</h2><p>使用共享对象的方法，用来尽可能减少内存使用量以及分享资讯。通常使用工厂类辅助，例子中使用一个HashMap类进行辅助判断，数据池中是否已经有了目标实例，如果有，则直接返回，不需要多次创建重复实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">abstract class flywei&#123; &#125;</span><br><span class="line"></span><br><span class="line">public class Flyweight extends flywei&#123;</span><br><span class="line">    Object obj ;</span><br><span class="line">    public Flyweight(Object obj)&#123;</span><br><span class="line">        this.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  FlyweightFactory&#123;</span><br><span class="line">    private HashMap&lt;Object,Flyweight&gt; data;</span><br><span class="line"></span><br><span class="line">    public FlyweightFactory()&#123; data = new HashMap&lt;&gt;();&#125;</span><br><span class="line"></span><br><span class="line">    public Flyweight getFlyweight(Object object)&#123;</span><br><span class="line">        if ( data.containsKey(object))&#123;</span><br><span class="line">            return data.get(object);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            Flyweight flyweight = new Flyweight(object);</span><br><span class="line">            data.put(object,flyweight);</span><br><span class="line">            return flyweight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java开发中的23种设计模式详解&quot;&gt;&lt;a href=&quot;#Java开发中的23种设计模式详解&quot; class=&quot;headerlink&quot; title=&quot;Java开发中的23种设计模式详解&quot;&gt;&lt;/a&gt;Java开发中的23种设计模式详解&lt;/h1&gt;&lt;h2 id=&quot;java的
      
    
    </summary>
    
      <category term="设计模式" scheme="http://enfangzhong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java编程" scheme="http://enfangzhong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java框架" scheme="http://enfangzhong.github.io/tags/java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="java编程" scheme="http://enfangzhong.github.io/tags/java%E7%BC%96%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="http://enfangzhong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>将hexo博客同时部署发布托管到github和coding</title>
    <link href="http://enfangzhong.github.io/2018/08/30/hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/"/>
    <id>http://enfangzhong.github.io/2018/08/30/hexo博客同时部署发布托管到github和coding/</id>
    <published>2018-08-29T16:12:11.000Z</published>
    <updated>2018-09-03T05:27:47.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，之前查资料听说gitcafe,但是听说gitcafe已经被coding收购了，所以就决定部署到coding。 查询了多方资料，终于鼓捣出了本地一次部署，同时更新到github以及coding。<br><img src="https://i.loli.net/2018/08/30/5b86d9304789a.png" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>_config.yml配置<br>想要同时部署到2个平台，就要修改博客根目录下面的_config.yml文件中的deploy如下<br>根据Hexo官方文档需要修改成下面的形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p><p>所以我的是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: git@github.com:enfang/enfang.github.io.git,master</span><br><span class="line">      coding: git@git.coding.net:enfang/enfang.git,master</span><br></pre></td></tr></table></figure></p><p>我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。</p><p>coding上创建一个新项目<br>这里只介绍coding上面如何创建项目，以及把本地hexo部署到coding上面，还不懂如何创建hexo的请看我之前的系类文章。首先我们创建一个项目，创建后进入项目的代码模块，获取到这个项目的ssh地址，我的是<a href="https://git.coding.net/enfang/enfang.git" target="_blank" rel="noopener">https://git.coding.net/enfang/enfang.git</a><br><img src="https://i.loli.net/2018/08/30/5b86d929e4b68.png" alt=""></p><p>同步本地hexo到coding上<br>把获取到了ssh配置在上面的_config.yml文件中的deploy下，如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考coding帮助中心<br>如果你看过我第一篇文章里面介绍过秘钥生成。<br>coding上的<a href="http://enfang.coding.me/2018/08/26/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BE%8E%E5%8C%96%E6%9B%B4%E6%96%B0/#more" target="_blank" rel="noopener">第一篇文章</a><br>github上的<a href="https://enfangzhong.github.io/2018/08/26/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BE%8E%E5%8C%96%E6%9B%B4%E6%96%B0/#more">第一篇文章</a></p><p>我这里直接使用之前部署github时已经生成的公钥。<br><img src="https://i.loli.net/2018/08/30/5b86d92990647.png" alt=""></p><p>本地打开 id_rsa.pub 文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。完成后点击“添加”，然后输入密码或动态码即可添加完成。<br><img src="https://i.loli.net/2018/08/30/5b86d92a0c55e.png" alt=""></p><p>添加后，测试公钥是否添加成功，在git bash命令输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p><p>如果得到下面提示就表示公钥添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.net Tips : [Hello ! You&apos;ve conected to Coding.net by SSH successfully! ]</span><br></pre></td></tr></table></figure></p><p>最后使用部署命令就能把博客同步到coding上面：</p><p>hexo deploy -g<br><img src="https://i.loli.net/2018/08/30/5b86d92a3da71.png" alt=""></p><p>pages服务方式部署<br>部署博客方式有两种，第一种就是pages服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages方式也很简单<br>就是在source/需要创建一个空白文件，至于原因，是因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd source/</span><br><span class="line">touch Staticfile  #名字必须是Staticfile</span><br></pre></td></tr></table></figure></p><p>分支选择master，因为前面配置的分支是master,因此开启之后，也需要是master。然后看起之后就可访问了。</p><p><strong>注意：</strong></p><p>如果你的项目名称跟你coding的用户名一样，比如我的用户是叫enfang,博客项目名也叫enfang<br>那直接访问 enfang.coding.me就能访问博客，否则就要带上项目名：enfang.coding.me/项目名 才能访问<br>推荐项目名跟用户名一样，这样就可以省略项目名了<br><img src="https://i.loli.net/2018/08/30/5b86d92bb1a82.png" alt=""></p><p>总结<br>到此为止，终于可以实现一次部署，github和coding两个网站同时更新。访问速度也是唰唰唰的快，忙乎了两天终于搭好了独立博客。希望对还在搭建hexo独立博客的小伙伴有帮助。<br>本人博客效果<br><img src="https://i.loli.net/2018/08/30/5b86d932b57bd.png" alt=""><br><a href="https://enfangzhong.github.io/">效果展示</a></p><p><strong>欢迎访问我的博客</strong><br><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，之前查资料听说g
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git" scheme="http://enfangzhong.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://enfangzhong.github.io/tags/hexo/"/>
    
      <category term="博客优化" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客添加在线联系功能</title>
    <link href="http://enfangzhong.github.io/2018/08/29/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB%E5%8A%9F%E8%83%BD/"/>
    <id>http://enfangzhong.github.io/2018/08/29/Hexo博客添加在线联系功能/</id>
    <published>2018-08-29T13:03:11.000Z</published>
    <updated>2018-09-03T05:16:11.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客添加在线联系功能"><a href="#Hexo博客添加在线联系功能" class="headerlink" title="Hexo博客添加在线联系功能"></a>Hexo博客添加在线联系功能</h1><p>Hexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p><p>最终的效果可以参考我博客的右下角,有个聊天的按钮,效果如下所示:<br><img src="https://i.loli.net/2018/08/29/5b867bfc05324.png" alt=""><br>配置方法如下:<br>首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:<br><img src="https://i.loli.net/2018/08/29/5b867bfc134be.png" alt=""><br>以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开主题配置文件_config.yml，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure></p><p>最后执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s就能看到效果了。</p><p>需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:<br><img src="https://i.loli.net/2018/08/29/5b867bfc0a0c8.png" alt=""></p><p>最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:<br><img src="https://i.loli.net/2018/08/29/5b867bfc055c2.png" alt=""><br>效果展示: <a href="https://enfangzhong.github.io/">酱油哥博客</a></p><p><strong>欢迎访问我的博客</strong><br><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo博客添加在线联系功能&quot;&gt;&lt;a href=&quot;#Hexo博客添加在线联系功能&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客添加在线联系功能&quot;&gt;&lt;/a&gt;Hexo博客添加在线联系功能&lt;/h1&gt;&lt;p&gt;Hexo博客如何添加在线联系功能呢,发现了一
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git" scheme="http://enfangzhong.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://enfangzhong.github.io/tags/hexo/"/>
    
      <category term="博客优化" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>markdown的使用方法</title>
    <link href="http://enfangzhong.github.io/2018/08/27/markdown%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://enfangzhong.github.io/2018/08/27/markdown的使用方法/</id>
    <published>2018-08-27T13:03:11.000Z</published>
    <updated>2018-09-03T05:16:03.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markDown的使用方法"><a href="#markDown的使用方法" class="headerlink" title="markDown的使用方法"></a>markDown的使用方法</h1><h2 id="第一步：下载markdown"><a href="#第一步：下载markdown" class="headerlink" title="第一步：下载markdown"></a>第一步：下载markdown</h2><h3 id="进入markdown官网，选择download，进行下载。"><a href="#进入markdown官网，选择download，进行下载。" class="headerlink" title="进入markdown官网，选择download，进行下载。"></a>进入markdown官网，选择download，进行下载。</h3><ul><li>列表1</li><li>列表2<br>  a 子列表1<br>  b 子列表2</li><li>列表3</li></ul><p>链接举例<br><a href="http://enfang.coding.me/enfang/" target="_blank" rel="noopener">酱油哥博客</a><br><img src="https://i.loli.net/2018/08/31/5b8920fdca03d.png" alt=""><br><em>斜体</em><br><strong>字体加粗</strong></p><hr><p>分割线</p><hr><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;markdown使用&lt;/tile&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;body&gt;&lt;body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>引用</p></blockquote><p> <strong>欢迎访问我的博客</strong><br><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;markDown的使用方法&quot;&gt;&lt;a href=&quot;#markDown的使用方法&quot; class=&quot;headerlink&quot; title=&quot;markDown的使用方法&quot;&gt;&lt;/a&gt;markDown的使用方法&lt;/h1&gt;&lt;h2 id=&quot;第一步：下载markdown&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git" scheme="http://enfangzhong.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://enfangzhong.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客及美化</title>
    <link href="http://enfangzhong.github.io/2018/08/26/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BE%8E%E5%8C%96%E6%9B%B4%E6%96%B0/"/>
    <id>http://enfangzhong.github.io/2018/08/26/hexo+github搭建个人博客及美化更新/</id>
    <published>2018-08-26T13:03:11.000Z</published>
    <updated>2018-09-03T05:16:06.150Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo+Github一步步搭建属于自己的博客（基础篇）</p><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><h3 id="安装Node-js和配置好Node-js环境，打开cmd命令行，输入："><a href="#安装Node-js和配置好Node-js环境，打开cmd命令行，输入：" class="headerlink" title="安装Node.js和配置好Node.js环境，打开cmd命令行，输入："></a>安装Node.js和配置好Node.js环境，打开cmd命令行，输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择Git-GUI-Here和Git-Bash-Here。查看git是否安装成功，在cmd命令行中输入："><a href="#安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择Git-GUI-Here和Git-Bash-Here。查看git是否安装成功，在cmd命令行中输入：" class="headerlink" title="安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择Git GUI Here和Git Bash Here。查看git是否安装成功，在cmd命令行中输入："></a>安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择Git GUI Here和Git Bash Here。查看git是否安装成功，在cmd命令行中输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="2、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README"><a href="#2、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README" class="headerlink" title="2、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README"></a>2、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</h2><h3 id="在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。</h3><h2 id="3、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"><a href="#3、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面" class="headerlink" title="3、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"></a>3、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure><h3 id="命令行中输入npm-install-hexo-g，开始安装Hexo，等待安装完毕后进行下一步"><a href="#命令行中输入npm-install-hexo-g，开始安装Hexo，等待安装完毕后进行下一步" class="headerlink" title="命令行中输入npm install hexo -g，开始安装Hexo，等待安装完毕后进行下一步"></a>命令行中输入npm install hexo -g，开始安装Hexo，等待安装完毕后进行下一步</h3><h3 id="输入hexo-init，初始化该文件夹（有点漫长的等待。。。）"><a href="#输入hexo-init，初始化该文件夹（有点漫长的等待。。。）" class="headerlink" title="输入hexo init，初始化该文件夹（有点漫长的等待。。。）"></a>输入hexo init，初始化该文件夹（有点漫长的等待。。。）</h3><h3 id="输入npm-install，安装所需要的组件"><a href="#输入npm-install，安装所需要的组件" class="headerlink" title="输入npm install，安装所需要的组件"></a>输入npm install，安装所需要的组件</h3><h3 id="输入hexo-g，首次体验Hexo"><a href="#输入hexo-g，首次体验Hexo" class="headerlink" title="输入hexo g，首次体验Hexo"></a>输入hexo g，首次体验Hexo</h3><h3 id="输入hexo-s，开启服务器，访问该网址，正式体验Hexo"><a href="#输入hexo-s，开启服务器，访问该网址，正式体验Hexo" class="headerlink" title="输入hexo s，开启服务器，访问该网址，正式体验Hexo"></a>输入hexo s，开启服务器，访问该网址，正式体验Hexo</h3><h3 id="问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl-c停止服务器，接着输入“hexo-server-p-端口号”来改变端口号，如何在浏览器中输入：localhost-端口号，你就可以在本地查看部署好的个人博客项目了。"><a href="#问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl-c停止服务器，接着输入“hexo-server-p-端口号”来改变端口号，如何在浏览器中输入：localhost-端口号，你就可以在本地查看部署好的个人博客项目了。" class="headerlink" title="问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号，如何在浏览器中输入：localhost:端口号，你就可以在本地查看部署好的个人博客项目了。"></a>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号，如何在浏览器中输入：localhost:端口号，你就可以在本地查看部署好的个人博客项目了。</h3><h2 id="4、将本地博客部署到github网站上去。"><a href="#4、将本地博客部署到github网站上去。" class="headerlink" title="4、将本地博客部署到github网站上去。"></a>4、将本地博客部署到github网站上去。</h2><h3 id="将Hexo与Github-page联系起来，设置Git的user-name和email"><a href="#将Hexo与Github-page联系起来，设置Git的user-name和email" class="headerlink" title="将Hexo与Github page联系起来，设置Git的user name和email"></a>将Hexo与Github page联系起来，设置Git的user name和email</h3><ul><li>设置Git的user name和email<br>  a 在博客blog目录下，右键选Git Baes Here,命令行中输入，其中的name和email替换成你自己的用户名和邮箱<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line">``` </span><br><span class="line">- 输入输入cd ~/.ssh,检查是否由.ssh的文件夹</span><br><span class="line">- 输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator\.ssh）。</span><br><span class="line"></span><br><span class="line">### 登录Github，点击头像下的settings，添加ssh。新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</span><br><span class="line"></span><br><span class="line">### 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</span><br></pre></td></tr></table></figure></li></ul><p>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:enfangzhong/enfangzhong.github.io.git<br>  branch: master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### repo值是你在github项目里的ssh（右下角）</span><br><span class="line"></span><br><span class="line">## 6、新建一篇博客，在cmd执行命令：hexo new post “博客名”</span><br></pre></td></tr></table></figure></p><p>hexo new post “你好，酱油哥”<br><code>`</code></p><h3 id="这时候在文件夹-posts目录下将会看到已经创建的文件"><a href="#这时候在文件夹-posts目录下将会看到已经创建的文件" class="headerlink" title="这时候在文件夹_posts目录下将会看到已经创建的文件"></a>这时候在文件夹_posts目录下将会看到已经创建的文件</h3><h3 id="在生成以及部署文章之前，需要安装一个扩展：npm-install-hexo-deployer-git-–save"><a href="#在生成以及部署文章之前，需要安装一个扩展：npm-install-hexo-deployer-git-–save" class="headerlink" title="在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save"></a>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save</h3><h3 id="使用编辑器编好文章，那么就可以使用命令：hexo-d-g，生成以及部署了"><a href="#使用编辑器编好文章，那么就可以使用命令：hexo-d-g，生成以及部署了" class="headerlink" title="使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了"></a>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了</h3><h3 id="部署成功后访问你的地址：http-用户名-github-io。那么将看到生成的文章"><a href="#部署成功后访问你的地址：http-用户名-github-io。那么将看到生成的文章" class="headerlink" title="部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章"></a>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章</h3><h3 id="好了，到此为止，最基本的也是最全面的hexo-github搭建博客完结。接下来进入主题优化吧"><a href="#好了，到此为止，最基本的也是最全面的hexo-github搭建博客完结。接下来进入主题优化吧" class="headerlink" title="好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来进入主题优化吧"></a>好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来进入主题优化吧</h3><p>主题优化展示: <a href="https://enfangzhong.github.io/">酱油哥</a></p><p><strong>欢迎访问我的博客</strong><br><a href="https://enfangzhong.github.io/">Git托管博客效果</a> </p><p><a href="http://enfang.coding.me/" target="_blank" rel="noopener">Coding托管博客效果</a></p><p><a href="https://itjyg.gitee.io" target="_blank" rel="noopener">码云托管博客效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Hexo+Github一步步搭建属于自己的博客（基础篇）&lt;/p&gt;
&lt;h2 id=&quot;1、准备工作&quot;&gt;&lt;a href=&quot;#1、准备工作&quot; class=&quot;headerlink&quot; title=&quot;1、准备工作&quot;&gt;&lt;/a&gt;1、准备工作&lt;/h2&gt;&lt;h3 id=&quot;安装Node-js和配
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo博客" scheme="http://enfangzhong.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://enfangzhong.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git" scheme="http://enfangzhong.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://enfangzhong.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
